
usasp-buttons.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001014  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00001014  000010a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001a0  0080007c  0080007c  000010c4  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  000010d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001be0  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a8a  00000000  00000000  00002e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000085f  00000000  00000000  000038c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000210  00000000  00000000  00004124  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000707  00000000  00000000  00004334  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c8a  00000000  00000000  00004a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000056c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	58 c0       	rjmp	.+176    	; 0xb2 <__ctors_end>
       2:	e7 c1       	rjmp	.+974    	; 0x3d2 <__vector_1>
       4:	71 c0       	rjmp	.+226    	; 0xe8 <__bad_interrupt>
       6:	70 c0       	rjmp	.+224    	; 0xe8 <__bad_interrupt>
       8:	6f c0       	rjmp	.+222    	; 0xe8 <__bad_interrupt>
       a:	6e c0       	rjmp	.+220    	; 0xe8 <__bad_interrupt>
       c:	6d c0       	rjmp	.+218    	; 0xe8 <__bad_interrupt>
       e:	6c c0       	rjmp	.+216    	; 0xe8 <__bad_interrupt>
      10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
      12:	3f c4       	rjmp	.+2174   	; 0x892 <__vector_9>
      14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
      16:	68 c0       	rjmp	.+208    	; 0xe8 <__bad_interrupt>
      18:	67 c0       	rjmp	.+206    	; 0xe8 <__bad_interrupt>
      1a:	66 c0       	rjmp	.+204    	; 0xe8 <__bad_interrupt>
      1c:	65 c0       	rjmp	.+202    	; 0xe8 <__bad_interrupt>
      1e:	64 c0       	rjmp	.+200    	; 0xe8 <__bad_interrupt>
      20:	63 c0       	rjmp	.+198    	; 0xe8 <__bad_interrupt>
      22:	62 c0       	rjmp	.+196    	; 0xe8 <__bad_interrupt>
      24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>

00000026 <__trampolines_end>:
      26:	12 01       	movw	r2, r4
      28:	10 01       	movw	r2, r0
      2a:	02 00       	.word	0x0002	; ????
      2c:	00 08       	sbc	r0, r0
      2e:	c0 16       	cp	r12, r16
      30:	e1 05       	cpc	r30, r1
      32:	00 01       	movw	r0, r0
      34:	01 02       	muls	r16, r17
      36:	00 01       	movw	r0, r0

00000038 <usbDescriptorStringDevice>:
      38:	10 03 55 00 53 00 42 00 2d 00 32 00 33 00 32 00     ..U.S.B.-.2.3.2.

00000048 <usbDescriptorStringVendor>:
      48:	22 03 77 00 77 00 77 00 2e 00 72 00 65 00 63 00     ".w.w.w...r.e.c.
      58:	75 00 72 00 73 00 69 00 6f 00 6e 00 2e 00 6a 00     u.r.s.i.o.n...j.
      68:	70 00                                               p.

0000006a <usbDescriptorString0>:
      6a:	04 03 09 04                                         ....

0000006e <configDescrCDC>:
      6e:	09 02 43 00 02 01 00 80 32 09 04 00 00 01 02 02     ..C.....2.......
      7e:	01 00 05 24 00 10 01 04 24 02 02 05 24 06 00 01     ...$....$...$...
      8e:	05 24 01 03 01 07 05 83 03 08 00 ff 09 04 01 00     .$..............
      9e:	02 0a 00 00 00 07 05 01 02 08 00 00 07 05 81 02     ................
      ae:	08 00 00 00                                         ....

000000b2 <__ctors_end>:
      b2:	11 24       	eor	r1, r1
      b4:	1f be       	out	0x3f, r1	; 63
      b6:	cf e5       	ldi	r28, 0x5F	; 95
      b8:	d4 e0       	ldi	r29, 0x04	; 4
      ba:	de bf       	out	0x3e, r29	; 62
      bc:	cd bf       	out	0x3d, r28	; 61

000000be <__do_copy_data>:
      be:	10 e0       	ldi	r17, 0x00	; 0
      c0:	a0 e6       	ldi	r26, 0x60	; 96
      c2:	b0 e0       	ldi	r27, 0x00	; 0
      c4:	e4 e1       	ldi	r30, 0x14	; 20
      c6:	f0 e1       	ldi	r31, 0x10	; 16
      c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x10>
      ca:	05 90       	lpm	r0, Z+
      cc:	0d 92       	st	X+, r0
      ce:	ac 37       	cpi	r26, 0x7C	; 124
      d0:	b1 07       	cpc	r27, r17
      d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0xc>

000000d4 <__do_clear_bss>:
      d4:	22 e0       	ldi	r18, 0x02	; 2
      d6:	ac e7       	ldi	r26, 0x7C	; 124
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
      dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
      de:	ac 31       	cpi	r26, 0x1C	; 28
      e0:	b2 07       	cpc	r27, r18
      e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
      e4:	6b d4       	rcall	.+2262   	; 0x9bc <main>
      e6:	94 c7       	rjmp	.+3880   	; 0x1010 <_exit>

000000e8 <__bad_interrupt>:
      e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <usbGenericSetInterrupt>:
/* ------------------------------------------------------------------------- */

#if !USB_CFG_SUPPRESS_INTR_CODE
#if USB_CFG_HAVE_INTRIN_ENDPOINT
static void usbGenericSetInterrupt(uchar *data, uchar len, usbTxStatus_t *txStatus)
{
      ea:	1f 93       	push	r17
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	16 2f       	mov	r17, r22
      f2:	ea 01       	movw	r28, r20

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
      f4:	28 81       	ld	r18, Y
      f6:	24 ff       	sbrs	r18, 4
      f8:	05 c0       	rjmp	.+10     	; 0x104 <usbGenericSetInterrupt+0x1a>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
      fa:	29 81       	ldd	r18, Y+1	; 0x01
      fc:	38 e8       	ldi	r19, 0x88	; 136
      fe:	23 27       	eor	r18, r19
     100:	29 83       	std	Y+1, r18	; 0x01
     102:	02 c0       	rjmp	.+4      	; 0x108 <usbGenericSetInterrupt+0x1e>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
     104:	2a e5       	ldi	r18, 0x5A	; 90
     106:	28 83       	st	Y, r18
    }
    p = txStatus->buffer + 1;
     108:	9e 01       	movw	r18, r28
     10a:	2e 5f       	subi	r18, 0xFE	; 254
     10c:	3f 4f       	sbci	r19, 0xFF	; 255
     10e:	d9 01       	movw	r26, r18
     110:	fc 01       	movw	r30, r24
     112:	81 0f       	add	r24, r17
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
     114:	91 91       	ld	r25, Z+
     116:	9d 93       	st	X+, r25
     118:	98 2f       	mov	r25, r24
     11a:	9e 1b       	sub	r25, r30
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
     11c:	19 16       	cp	r1, r25
     11e:	d4 f3       	brlt	.-12     	; 0x114 <usbGenericSetInterrupt+0x2a>
    usbCrc16Append(&txStatus->buffer[1], len);
     120:	61 2f       	mov	r22, r17
     122:	c9 01       	movw	r24, r18
     124:	52 d1       	rcall	.+676    	; 0x3ca <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
     126:	1c 5f       	subi	r17, 0xFC	; 252
     128:	18 83       	st	Y, r17
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}
     12a:	df 91       	pop	r29
     12c:	cf 91       	pop	r28
     12e:	1f 91       	pop	r17
     130:	08 95       	ret

00000132 <usbSetInterrupt>:

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
     132:	47 e9       	ldi	r20, 0x97	; 151
     134:	50 e0       	ldi	r21, 0x00	; 0
     136:	d9 cf       	rjmp	.-78     	; 0xea <usbGenericSetInterrupt>

00000138 <usbSetInterrupt3>:
#endif

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
USB_PUBLIC void usbSetInterrupt3(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus3);
     138:	43 ec       	ldi	r20, 0xC3	; 195
     13a:	50 e0       	ldi	r21, 0x00	; 0
     13c:	d6 cf       	rjmp	.-84     	; 0xea <usbGenericSetInterrupt>

0000013e <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
     142:	60 91 a9 00 	lds	r22, 0x00A9
     146:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
     148:	67 fd       	sbrc	r22, 7
     14a:	b2 c0       	rjmp	.+356    	; 0x2b0 <usbPoll+0x172>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
     14c:	80 91 a6 00 	lds	r24, 0x00A6
     150:	cc e0       	ldi	r28, 0x0C	; 12
     152:	d0 e0       	ldi	r29, 0x00	; 0
     154:	c8 1b       	sub	r28, r24
     156:	d1 09       	sbc	r29, r1
     158:	c3 55       	subi	r28, 0x53	; 83
     15a:	df 4f       	sbci	r29, 0xFF	; 255
 * 0...0x0f for OUT on endpoint X
 */
    DBG2(0x10 + (usbRxToken & 0xf), data, len + 2); /* SETUP=1d, SETUP-DATA=11, OUTx=1x */
    USB_RX_USER_HOOK(data, len)
#if USB_CFG_IMPLEMENT_FN_WRITEOUT
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
     15c:	80 91 a5 00 	lds	r24, 0x00A5
     160:	80 31       	cpi	r24, 0x10	; 16
     162:	18 f4       	brcc	.+6      	; 0x16a <usbPoll+0x2c>
        usbFunctionWriteOut(data, len);
     164:	ce 01       	movw	r24, r28
     166:	68 d3       	rcall	.+1744   	; 0x838 <usbFunctionWriteOut>
     168:	9d c0       	rjmp	.+314    	; 0x2a4 <usbPoll+0x166>
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
     16a:	8d 32       	cpi	r24, 0x2D	; 45
     16c:	09 f0       	breq	.+2      	; 0x170 <usbPoll+0x32>
     16e:	8b c0       	rjmp	.+278    	; 0x286 <usbPoll+0x148>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
     170:	68 30       	cpi	r22, 0x08	; 8
     172:	09 f0       	breq	.+2      	; 0x176 <usbPoll+0x38>
     174:	97 c0       	rjmp	.+302    	; 0x2a4 <usbPoll+0x166>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
     176:	83 ec       	ldi	r24, 0xC3	; 195
     178:	80 93 8c 00 	sts	0x008C, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
     17c:	8a e5       	ldi	r24, 0x5A	; 90
     17e:	80 93 61 00 	sts	0x0061, r24
        usbMsgFlags = 0;
     182:	10 92 a4 00 	sts	0x00A4, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
     186:	88 81       	ld	r24, Y
     188:	80 76       	andi	r24, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
     18a:	19 f0       	breq	.+6      	; 0x192 <usbPoll+0x54>
            replyLen = usbFunctionSetup(data);
     18c:	ce 01       	movw	r24, r28
     18e:	fd d2       	rcall	.+1530   	; 0x78a <usbFunctionSetup>
     190:	67 c0       	rjmp	.+206    	; 0x260 <usbPoll+0x122>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
     192:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
     194:	10 92 95 00 	sts	0x0095, r1
    SWITCH_START(rq->bRequest)
     198:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
     19a:	81 11       	cpse	r24, r1
     19c:	06 c0       	rjmp	.+12     	; 0x1aa <usbPoll+0x6c>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
     19e:	10 92 96 00 	sts	0x0096, r1
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     1a2:	25 e9       	ldi	r18, 0x95	; 149
     1a4:	30 e0       	ldi	r19, 0x00	; 0
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
     1a6:	82 e0       	ldi	r24, 0x02	; 2
     1a8:	57 c0       	rjmp	.+174    	; 0x258 <usbPoll+0x11a>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
     1aa:	85 30       	cpi	r24, 0x05	; 5
     1ac:	19 f4       	brne	.+6      	; 0x1b4 <usbPoll+0x76>
        usbNewDeviceAddr = value;
     1ae:	90 93 aa 00 	sts	0x00AA, r25
     1b2:	4f c0       	rjmp	.+158    	; 0x252 <usbPoll+0x114>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
     1b4:	86 30       	cpi	r24, 0x06	; 6
     1b6:	a9 f5       	brne	.+106    	; 0x222 <usbPoll+0xe4>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
     1b8:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
     1ba:	81 30       	cpi	r24, 0x01	; 1
     1bc:	41 f4       	brne	.+16     	; 0x1ce <usbPoll+0x90>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
     1be:	86 e2       	ldi	r24, 0x26	; 38
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	90 93 a8 00 	sts	0x00A8, r25
     1c6:	80 93 a7 00 	sts	0x00A7, r24
     1ca:	82 e1       	ldi	r24, 0x12	; 18
     1cc:	26 c0       	rjmp	.+76     	; 0x21a <usbPoll+0xdc>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
     1ce:	82 30       	cpi	r24, 0x02	; 2
     1d0:	19 f4       	brne	.+6      	; 0x1d8 <usbPoll+0x9a>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
     1d2:	ce 01       	movw	r24, r28
     1d4:	c5 d2       	rcall	.+1418   	; 0x760 <usbFunctionDescriptor>
     1d6:	21 c0       	rjmp	.+66     	; 0x21a <usbPoll+0xdc>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
     1d8:	83 30       	cpi	r24, 0x03	; 3
     1da:	f1 f4       	brne	.+60     	; 0x218 <usbPoll+0xda>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
     1dc:	91 11       	cpse	r25, r1
     1de:	08 c0       	rjmp	.+16     	; 0x1f0 <usbPoll+0xb2>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
     1e0:	8a e6       	ldi	r24, 0x6A	; 106
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	90 93 a8 00 	sts	0x00A8, r25
     1e8:	80 93 a7 00 	sts	0x00A7, r24
     1ec:	84 e0       	ldi	r24, 0x04	; 4
     1ee:	15 c0       	rjmp	.+42     	; 0x21a <usbPoll+0xdc>
        SWITCH_CASE(1)
     1f0:	91 30       	cpi	r25, 0x01	; 1
     1f2:	41 f4       	brne	.+16     	; 0x204 <usbPoll+0xc6>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
     1f4:	88 e4       	ldi	r24, 0x48	; 72
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	90 93 a8 00 	sts	0x00A8, r25
     1fc:	80 93 a7 00 	sts	0x00A7, r24
     200:	82 e2       	ldi	r24, 0x22	; 34
     202:	0b c0       	rjmp	.+22     	; 0x21a <usbPoll+0xdc>
        SWITCH_CASE(2)
     204:	92 30       	cpi	r25, 0x02	; 2
     206:	41 f4       	brne	.+16     	; 0x218 <usbPoll+0xda>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
     208:	88 e3       	ldi	r24, 0x38	; 56
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	90 93 a8 00 	sts	0x00A8, r25
     210:	80 93 a7 00 	sts	0x00A7, r24
     214:	80 e1       	ldi	r24, 0x10	; 16
     216:	01 c0       	rjmp	.+2      	; 0x21a <usbPoll+0xdc>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
     218:	80 e0       	ldi	r24, 0x00	; 0
                flags = 0;
            }
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
     21a:	90 e4       	ldi	r25, 0x40	; 64
     21c:	90 93 a4 00 	sts	0x00A4, r25
     220:	1f c0       	rjmp	.+62     	; 0x260 <usbPoll+0x122>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
     222:	88 30       	cpi	r24, 0x08	; 8
     224:	79 f0       	breq	.+30     	; 0x244 <usbPoll+0x106>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
     226:	89 30       	cpi	r24, 0x09	; 9
     228:	19 f4       	brne	.+6      	; 0x230 <usbPoll+0xf2>
        usbConfiguration = value;
     22a:	90 93 ac 00 	sts	0x00AC, r25
     22e:	11 c0       	rjmp	.+34     	; 0x252 <usbPoll+0x114>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
     230:	8a 30       	cpi	r24, 0x0A	; 10
     232:	59 f0       	breq	.+22     	; 0x24a <usbPoll+0x10c>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
     234:	8b 30       	cpi	r24, 0x0B	; 11
     236:	69 f4       	brne	.+26     	; 0x252 <usbPoll+0x114>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     238:	8b e4       	ldi	r24, 0x4B	; 75
     23a:	80 93 98 00 	sts	0x0098, r24
#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
    USB_SET_DATATOKEN3(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     23e:	80 93 c4 00 	sts	0x00C4, r24
     242:	07 c0       	rjmp	.+14     	; 0x252 <usbPoll+0x114>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
     244:	2c ea       	ldi	r18, 0xAC	; 172
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	02 c0       	rjmp	.+4      	; 0x24e <usbPoll+0x110>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     24a:	25 e9       	ldi	r18, 0x95	; 149
     24c:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	03 c0       	rjmp	.+6      	; 0x258 <usbPoll+0x11a>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     252:	25 e9       	ldi	r18, 0x95	; 149
     254:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
     256:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
     258:	30 93 a8 00 	sts	0x00A8, r19
     25c:	20 93 a7 00 	sts	0x00A7, r18
            replyLen = usbFunctionSetup(data);
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
     260:	8f 3f       	cpi	r24, 0xFF	; 255
     262:	39 f4       	brne	.+14     	; 0x272 <usbPoll+0x134>
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
     264:	98 81       	ld	r25, Y
     266:	97 fd       	sbrc	r25, 7
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
     268:	8e 81       	ldd	r24, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
     26a:	90 e8       	ldi	r25, 0x80	; 128
     26c:	90 93 a4 00 	sts	0x00A4, r25
     270:	07 c0       	rjmp	.+14     	; 0x280 <usbPoll+0x142>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
     272:	9f 81       	ldd	r25, Y+7	; 0x07
     274:	91 11       	cpse	r25, r1
     276:	04 c0       	rjmp	.+8      	; 0x280 <usbPoll+0x142>
     278:	9e 81       	ldd	r25, Y+6	; 0x06
     27a:	98 17       	cp	r25, r24
     27c:	08 f4       	brcc	.+2      	; 0x280 <usbPoll+0x142>
     27e:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
     280:	80 93 60 00 	sts	0x0060, r24
     284:	0f c0       	rjmp	.+30     	; 0x2a4 <usbPoll+0x166>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
     286:	80 91 a4 00 	lds	r24, 0x00A4
     28a:	87 ff       	sbrs	r24, 7
     28c:	0b c0       	rjmp	.+22     	; 0x2a4 <usbPoll+0x166>
            uchar rval = usbFunctionWrite(data, len);
     28e:	ce 01       	movw	r24, r28
     290:	b2 d2       	rcall	.+1380   	; 0x7f6 <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
     292:	8f 3f       	cpi	r24, 0xFF	; 255
     294:	21 f4       	brne	.+8      	; 0x29e <usbPoll+0x160>
                usbTxLen = USBPID_STALL;
     296:	8e e1       	ldi	r24, 0x1E	; 30
     298:	80 93 61 00 	sts	0x0061, r24
     29c:	03 c0       	rjmp	.+6      	; 0x2a4 <usbPoll+0x166>
            }else if(rval != 0){    /* This was the final package */
     29e:	81 11       	cpse	r24, r1
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
     2a0:	10 92 60 00 	sts	0x0060, r1
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
     2a4:	80 91 a9 00 	lds	r24, 0x00A9
     2a8:	18 16       	cp	r1, r24
     2aa:	14 f4       	brge	.+4      	; 0x2b0 <usbPoll+0x172>
            usbRxLen = 0;
     2ac:	10 92 a9 00 	sts	0x00A9, r1
#else
        usbRxLen = 0;       /* mark rx buffer as available */
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
     2b0:	80 91 61 00 	lds	r24, 0x0061
     2b4:	84 ff       	sbrs	r24, 4
     2b6:	56 c0       	rjmp	.+172    	; 0x364 <usbPoll+0x226>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
     2b8:	80 91 60 00 	lds	r24, 0x0060
     2bc:	8f 3f       	cpi	r24, 0xFF	; 255
     2be:	09 f4       	brne	.+2      	; 0x2c2 <usbPoll+0x184>
     2c0:	51 c0       	rjmp	.+162    	; 0x364 <usbPoll+0x226>
     2c2:	c8 2f       	mov	r28, r24
     2c4:	89 30       	cpi	r24, 0x09	; 9
     2c6:	08 f0       	brcs	.+2      	; 0x2ca <usbPoll+0x18c>
     2c8:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
     2ca:	8c 1b       	sub	r24, r28
     2cc:	80 93 60 00 	sts	0x0060, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
     2d0:	80 91 8c 00 	lds	r24, 0x008C
     2d4:	98 e8       	ldi	r25, 0x88	; 136
     2d6:	89 27       	eor	r24, r25
     2d8:	80 93 8c 00 	sts	0x008C, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
     2dc:	cc 23       	and	r28, r28
     2de:	89 f1       	breq	.+98     	; 0x342 <usbPoll+0x204>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
     2e0:	80 91 a4 00 	lds	r24, 0x00A4
     2e4:	87 ff       	sbrs	r24, 7
     2e6:	08 c0       	rjmp	.+16     	; 0x2f8 <usbPoll+0x1ba>
            len = usbFunctionRead(data, len);
     2e8:	6c 2f       	mov	r22, r28
     2ea:	8d e8       	ldi	r24, 0x8D	; 141
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	6b d2       	rcall	.+1238   	; 0x7c6 <usbFunctionRead>
     2f0:	c8 2f       	mov	r28, r24
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
     2f2:	89 30       	cpi	r24, 0x09	; 9
     2f4:	88 f5       	brcc	.+98     	; 0x358 <usbPoll+0x21a>
     2f6:	25 c0       	rjmp	.+74     	; 0x342 <usbPoll+0x204>
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
     2f8:	40 91 a7 00 	lds	r20, 0x00A7
     2fc:	50 91 a8 00 	lds	r21, 0x00A8
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
     300:	86 ff       	sbrs	r24, 6
     302:	0b c0       	rjmp	.+22     	; 0x31a <usbPoll+0x1dc>
     304:	ad e8       	ldi	r26, 0x8D	; 141
     306:	b0 e0       	ldi	r27, 0x00	; 0
     308:	fa 01       	movw	r30, r20
     30a:	8c 2f       	mov	r24, r28
     30c:	8a 0f       	add	r24, r26
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
     30e:	94 91       	lpm	r25, Z
                    *data++ = c;
     310:	9d 93       	st	X+, r25
                    r++;
     312:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
     314:	8a 13       	cpse	r24, r26
     316:	fb cf       	rjmp	.-10     	; 0x30e <usbPoll+0x1d0>
     318:	09 c0       	rjmp	.+18     	; 0x32c <usbPoll+0x1ee>
     31a:	da 01       	movw	r26, r20
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
     31c:	ed e8       	ldi	r30, 0x8D	; 141
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	8c 2f       	mov	r24, r28
     322:	8e 0f       	add	r24, r30
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
     324:	9d 91       	ld	r25, X+
     326:	91 93       	st	Z+, r25
                    r++;
                }while(--i);
     328:	8e 13       	cpse	r24, r30
     32a:	fc cf       	rjmp	.-8      	; 0x324 <usbPoll+0x1e6>
     32c:	2f ef       	ldi	r18, 0xFF	; 255
     32e:	2c 0f       	add	r18, r28
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	2f 5f       	subi	r18, 0xFF	; 255
     334:	3f 4f       	sbci	r19, 0xFF	; 255
     336:	24 0f       	add	r18, r20
     338:	35 1f       	adc	r19, r21
            }
            usbMsgPtr = r;
     33a:	30 93 a8 00 	sts	0x00A8, r19
     33e:	20 93 a7 00 	sts	0x00A7, r18
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
     342:	6c 2f       	mov	r22, r28
     344:	8d e8       	ldi	r24, 0x8D	; 141
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	40 d0       	rcall	.+128    	; 0x3ca <usbCrc16Append>
        len += 4;           /* length including sync byte */
     34a:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
     34c:	cc 30       	cpi	r28, 0x0C	; 12
     34e:	41 f0       	breq	.+16     	; 0x360 <usbPoll+0x222>
            usbMsgLen = USB_NO_MSG;
     350:	8f ef       	ldi	r24, 0xFF	; 255
     352:	80 93 60 00 	sts	0x0060, r24
     356:	04 c0       	rjmp	.+8      	; 0x360 <usbPoll+0x222>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
     358:	8f ef       	ldi	r24, 0xFF	; 255
     35a:	80 93 60 00 	sts	0x0060, r24
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
     35e:	ce e1       	ldi	r28, 0x1E	; 30
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
     360:	c0 93 61 00 	sts	0x0061, r28
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
     364:	84 e1       	ldi	r24, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
     366:	96 b3       	in	r25, 0x16	; 22
     368:	93 70       	andi	r25, 0x03	; 3
        if(usbLineStatus != 0)  /* SE0 has ended */
     36a:	31 f4       	brne	.+12     	; 0x378 <usbPoll+0x23a>
     36c:	81 50       	subi	r24, 0x01	; 1
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
     36e:	d9 f7       	brne	.-10     	; 0x366 <usbPoll+0x228>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
     370:	10 92 aa 00 	sts	0x00AA, r1
    usbDeviceAddr = 0;
     374:	10 92 a3 00 	sts	0x00A3, r1
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	08 95       	ret

0000037e <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
     37e:	85 b7       	in	r24, 0x35	; 53
     380:	82 60       	ori	r24, 0x02	; 2
     382:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
     384:	8b b7       	in	r24, 0x3b	; 59
     386:	80 64       	ori	r24, 0x40	; 64
     388:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     38a:	8b e4       	ldi	r24, 0x4B	; 75
     38c:	80 93 98 00 	sts	0x0098, r24
#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
    USB_SET_DATATOKEN3(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     390:	80 93 c4 00 	sts	0x00C4, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
     394:	8a e5       	ldi	r24, 0x5A	; 90
     396:	80 93 97 00 	sts	0x0097, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
     39a:	80 93 c3 00 	sts	0x00C3, r24
     39e:	08 95       	ret

000003a0 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
     3a0:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
     3a2:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
     3a4:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
     3a6:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
     3a8:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
     3aa:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
     3ac:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
     3ae:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
     3b0:	09 c0       	rjmp	.+18     	; 0x3c4 <usbCrcLoopEntry>

000003b2 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
     3b2:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
     3b4:	82 27       	eor	r24, r18

000003b6 <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
     3b6:	97 95       	ror	r25
    ror     resCrcL
     3b8:	87 95       	ror	r24
    brcs    usbCrcNoXor
     3ba:	10 f0       	brcs	.+4      	; 0x3c0 <usbCrcNoXor>
    eor     resCrcL, polyL
     3bc:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
     3be:	95 27       	eor	r25, r21

000003c0 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
     3c0:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
     3c2:	c8 f3       	brcs	.-14     	; 0x3b6 <usbCrcBitLoop>

000003c4 <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
     3c4:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
     3c6:	a8 f3       	brcs	.-22     	; 0x3b2 <usbCrcByteLoop>

000003c8 <usbCrcReady>:
usbCrcReady:
    ret
     3c8:	08 95       	ret

000003ca <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
     3ca:	ea df       	rcall	.-44     	; 0x3a0 <usbCrc16>
    st      ptr+, resCrcL
     3cc:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
     3ce:	9d 93       	st	X+, r25
    ret
     3d0:	08 95       	ret

000003d2 <__vector_1>:
;max allowable interrupt latency: 34 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
     3d2:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
     3d4:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
     3d6:	cf 93       	push	r28

000003d8 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
     3d8:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
     3da:	b0 9b       	sbis	0x16, 0	; 22
    brne    waitForJ        ; just make sure we have ANY timeout
     3dc:	e9 f7       	brne	.-6      	; 0x3d8 <waitForJ>

000003de <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
     3de:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
     3e0:	09 c0       	rjmp	.+18     	; 0x3f4 <foundK>
    sbis    USBIN, USBMINUS
     3e2:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
     3e4:	07 c0       	rjmp	.+14     	; 0x3f4 <foundK>
    sbis    USBIN, USBMINUS
     3e6:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
     3e8:	05 c0       	rjmp	.+10     	; 0x3f4 <foundK>
    sbis    USBIN, USBMINUS
     3ea:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
     3ec:	03 c0       	rjmp	.+6      	; 0x3f4 <foundK>
    sbis    USBIN, USBMINUS
     3ee:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
     3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
     3f2:	a6 c0       	rjmp	.+332    	; 0x540 <sofError>

000003f4 <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
     3f4:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
     3f6:	c0 91 a6 00 	lds	r28, 0x00A6
    clr     YH                  ;1 [5]
     3fa:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
     3fc:	c3 55       	subi	r28, 0x53	; 83
    sbci    YH, hi8(-(usbRxBuf));1 [7]
     3fe:	df 4f       	sbci	r29, 0xFF	; 255

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
     400:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    haveTwoBitsK    ;2 [10]
     402:	02 c0       	rjmp	.+4      	; 0x408 <haveTwoBitsK>
    pop     YH              ;2 [11] undo the push from before
     404:	df 91       	pop	r29
    rjmp    waitForK        ;2 [13] this was not the end of sync, retry
     406:	eb cf       	rjmp	.-42     	; 0x3de <waitForK>

00000408 <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
     408:	2f 93       	push	r18
    push    x1              ;2 [12]
     40a:	0f 93       	push	r16
    push    x2              ;2 [14]
     40c:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
     40e:	06 b3       	in	r16, 0x16	; 22
    ldi     shift, 0xff     ;1 [18]
     410:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
     412:	00 fb       	bst	r16, 0
    bld     shift, 0        ;1 [20]
     414:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
     416:	4f 93       	push	r20
    push    cnt             ;2 [24]
     418:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
     41a:	16 b3       	in	r17, 0x16	; 22
    ser     x3              ;1 [26] [inserted init instruction]
     41c:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
     41e:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
     420:	00 fb       	bst	r16, 0
    bld     shift, 1        ;1 [29]
     422:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
     424:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
     426:	31 c0       	rjmp	.+98     	; 0x48a <rxbit2>

00000428 <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
     428:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
     42a:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
     42c:	16 b3       	in	r17, 0x16	; 22
    ori     shift, 0x01 ;1 [18]
     42e:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
     430:	28 c0       	rjmp	.+80     	; 0x482 <didUnstuff0>

00000432 <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
     432:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
     434:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
     436:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
     438:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
     43a:	06 b3       	in	r16, 0x16	; 22
    rjmp    didUnstuff1 ;2 [27]
     43c:	29 c0       	rjmp	.+82     	; 0x490 <didUnstuff1>

0000043e <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
     43e:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
     440:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
     442:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
     444:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
     446:	16 b3       	in	r17, 0x16	; 22
    rjmp    didUnstuff2 ;2 [35]
     448:	2b c0       	rjmp	.+86     	; 0x4a0 <didUnstuff2>

0000044a <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
     44a:	16 b3       	in	r17, 0x16	; 22
    andi    x3, ~0x08   ;1 [35]
     44c:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
     44e:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
     450:	2a c0       	rjmp	.+84     	; 0x4a6 <didUnstuff3>

00000452 <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
     452:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
     454:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x10 ;1 [42]
     456:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
     458:	2c c0       	rjmp	.+88     	; 0x4b2 <didUnstuff4>

0000045a <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
     45a:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
     45c:	16 b3       	in	r17, 0x16	; 22
    ori     shift, 0x20 ;1 [50]
     45e:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
     460:	2f c0       	rjmp	.+94     	; 0x4c0 <didUnstuff5>

00000462 <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
     462:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
     464:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x40 ;1 [58]
     466:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
     468:	32 c0       	rjmp	.+100    	; 0x4ce <didUnstuff6>

0000046a <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
     46a:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
     46c:	06 b3       	in	r16, 0x16	; 22
    st      y+, x3      ;2 [3] store data
     46e:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
     470:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
     472:	00 00       	nop
    eor     x2, x1      ;1 [6]
     474:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
     476:	10 fb       	bst	r17, 0
    bld     shift, 0    ;1 [8]
     478:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
     47a:	16 b3       	in	r17, 0x16	; 22
    andi    x2, USBMASK ;1 [10]
     47c:	13 70       	andi	r17, 0x03	; 3
    breq    se0         ;1 [11] SE0 check for bit 1
     47e:	c9 f1       	breq	.+114    	; 0x4f2 <se0>
    andi    shift, 0xf9 ;1 [12]
     480:	29 7f       	andi	r18, 0xF9	; 249

00000482 <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
     482:	91 f2       	breq	.-92     	; 0x428 <unstuff0>
    eor     x1, x2      ;1 [14]
     484:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
     486:	00 fb       	bst	r16, 0
    bld     shift, 1    ;1 [16]
     488:	21 f9       	bld	r18, 1

0000048a <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
     48a:	06 b3       	in	r16, 0x16	; 22
    andi    shift, 0xf3 ;1 [18]
     48c:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
     48e:	89 f2       	breq	.-94     	; 0x432 <unstuff1>

00000490 <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
     490:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
     492:	58 f1       	brcs	.+86     	; 0x4ea <overflow>
    eor     x2, x1      ;1 [22]
     494:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
     496:	10 fb       	bst	r17, 0
    bld     shift, 2    ;1 [24]
     498:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
     49a:	16 b3       	in	r17, 0x16	; 22
    andi    shift, 0xe7 ;1 [26]
     49c:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
     49e:	79 f2       	breq	.-98     	; 0x43e <unstuff2>

000004a0 <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
     4a0:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
     4a2:	00 fb       	bst	r16, 0
    bld     shift, 3    ;1 [30]
     4a4:	23 f9       	bld	r18, 3

000004a6 <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
     4a6:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
     4a8:	81 f2       	breq	.-96     	; 0x44a <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
     4aa:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1      ;1 [34]
     4ac:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
     4ae:	10 fb       	bst	r17, 0
    bld     shift, 4    ;1 [36]
     4b0:	24 f9       	bld	r18, 4

000004b2 <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
     4b2:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
     4b4:	71 f2       	breq	.-100    	; 0x452 <unstuff4>
    nop2                ;2 [40]
     4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
     4b8:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2      ;1 [42]
     4ba:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
     4bc:	00 fb       	bst	r16, 0
    bld     shift, 5    ;1 [44]
     4be:	25 f9       	bld	r18, 5

000004c0 <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
     4c0:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
     4c2:	59 f2       	breq	.-106    	; 0x45a <unstuff5>
    nop2                ;2 [48]
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
     4c6:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1      ;1 [50]
     4c8:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
     4ca:	10 fb       	bst	r17, 0
    bld     shift, 6    ;1 [52]
     4cc:	26 f9       	bld	r18, 6

000004ce <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
     4ce:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
     4d0:	40 f2       	brcs	.-112    	; 0x462 <unstuff6>
    nop2                ;2 [56]
     4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
     4d4:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2      ;1 [58]
     4d6:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
     4d8:	00 fb       	bst	r16, 0
    bld     shift, 7    ;1 [60]
     4da:	27 f9       	bld	r18, 7

000004dc <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
     4dc:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
     4de:	28 f6       	brcc	.-118    	; 0x46a <rxLoop>

000004e0 <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
     4e0:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
     4e2:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
     4e4:	16 b3       	in	r17, 0x16	; 22
    nop                 ;1 [66]
     4e6:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
     4e8:	f9 cf       	rjmp	.-14     	; 0x4dc <didUnstuff7>

000004ea <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
     4ea:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
     4ec:	1a bf       	out	0x3a, r17	; 58

000004ee <ignorePacket>:
ignorePacket:
    clr     token
     4ee:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
     4f0:	1c c0       	rjmp	.+56     	; 0x52a <storeTokenAndReturn>

000004f2 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
     4f2:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
     4f4:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
     4f6:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
     4f8:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
     4fa:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
     4fc:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
     4fe:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
     500:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
     502:	11 f1       	breq	.+68     	; 0x548 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
     504:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
     506:	01 f1       	breq	.+64     	; 0x548 <handleData>
    lds     shift, usbDeviceAddr;[17]
     508:	20 91 a3 00 	lds	r18, 0x00A3
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
     50c:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
     50e:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
     510:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
     512:	ed cf       	rjmp	.-38     	; 0x4ee <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
     514:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
     516:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
     518:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
     51a:	59 f1       	breq	.+86     	; 0x572 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
     51c:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
     51e:	11 f0       	breq	.+4      	; 0x524 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
     520:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
     522:	29 f7       	brne	.-54     	; 0x4ee <ignorePacket>

00000524 <handleSetupOrOut>:
;Setup and Out are followed by a data packet two bit times (16 cycles) after
;the end of SE0. The sync code allows up to 40 cycles delay from the start of
;the sync pattern until the first bit is sampled. That's a total of 56 cycles.
handleSetupOrOut:               ;[32]
#if USB_CFG_IMPLEMENT_FN_WRITEOUT   /* if we have data for endpoint != 0, set usbCurrentTok to address */
    andi    x3, 0xf             ;[32]
     524:	4f 70       	andi	r20, 0x0F	; 15
    breq    storeTokenAndReturn ;[33]
     526:	09 f0       	breq	.+2      	; 0x52a <storeTokenAndReturn>
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
     528:	04 2f       	mov	r16, r20

0000052a <storeTokenAndReturn>:
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
     52a:	00 93 ab 00 	sts	0x00AB, r16

0000052e <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
     52e:	3f 91       	pop	r19
     530:	4f 91       	pop	r20
     532:	1f 91       	pop	r17
     534:	0f 91       	pop	r16
     536:	2f 91       	pop	r18
     538:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
     53a:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
     53c:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
     53e:	4c cf       	rjmp	.-360    	; 0x3d8 <waitForJ>

00000540 <sofError>:
sofError:
    POP_RETI                    ;macro call
     540:	cf 91       	pop	r28
     542:	cf bf       	out	0x3f, r28	; 63
     544:	cf 91       	pop	r28
    reti
     546:	18 95       	reti

00000548 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
     548:	20 91 ab 00 	lds	r18, 0x00AB
    tst     shift               ;[20]
     54c:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
     54e:	79 f3       	breq	.-34     	; 0x52e <doReturn>
    lds     x2, usbRxLen        ;[22]
     550:	10 91 a9 00 	lds	r17, 0x00A9
    tst     x2                  ;[24]
     554:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
     556:	c1 f5       	brne	.+112    	; 0x5c8 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
     558:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
     55a:	c2 f1       	brmi	.+112    	; 0x5cc <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
     55c:	30 93 a9 00 	sts	0x00A9, r19
    sts     usbRxToken, shift   ;[30]
     560:	20 93 a5 00 	sts	0x00A5, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
     564:	10 91 a6 00 	lds	r17, 0x00A6
    ldi     cnt, USB_BUFSIZE    ;[34]
     568:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
     56a:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
     56c:	30 93 a6 00 	sts	0x00A6, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
     570:	2d c0       	rjmp	.+90     	; 0x5cc <sendAckAndReti>

00000572 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
     572:	00 91 a9 00 	lds	r16, 0x00A9
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
     576:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
     578:	3c f5       	brge	.+78     	; 0x5c8 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
     57a:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
     57c:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
     57e:	49 f4       	brne	.+18     	; 0x592 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
     580:	30 91 61 00 	lds	r19, 0x0061
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
     584:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
     586:	24 c0       	rjmp	.+72     	; 0x5d0 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
     588:	00 93 61 00 	sts	0x0061, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
     58c:	cc e8       	ldi	r28, 0x8C	; 140
    ldi     YH, hi8(usbTxBuf)   ;[44]
     58e:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
     590:	23 c0       	rjmp	.+70     	; 0x5d8 <usbSendAndReti>

00000592 <handleIn1>:

#if !USB_CFG_SUPPRESS_INTR_CODE && USB_CFG_HAVE_INTRIN_ENDPOINT /* placed here due to relative jump range */
handleIn1:                      ;[38]
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
     592:	43 30       	cpi	r20, 0x03	; 3
    breq    handleIn3           ;[39]
     594:	49 f0       	breq	.+18     	; 0x5a8 <handleIn3>
#endif
    lds     cnt, usbTxLen1      ;[40]
     596:	30 91 97 00 	lds	r19, 0x0097
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
     59a:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
     59c:	19 c0       	rjmp	.+50     	; 0x5d0 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
     59e:	00 93 97 00 	sts	0x0097, r16
    ldi     YL, lo8(usbTxBuf1)  ;[46]
     5a2:	c8 e9       	ldi	r28, 0x98	; 152
    ldi     YH, hi8(usbTxBuf1)  ;[47]
     5a4:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
     5a6:	18 c0       	rjmp	.+48     	; 0x5d8 <usbSendAndReti>

000005a8 <handleIn3>:

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
handleIn3:
    lds     cnt, usbTxLen3      ;[41]
     5a8:	30 91 c3 00 	lds	r19, 0x00C3
    sbrc    cnt, 4              ;[43]
     5ac:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[44] 49 + 16 = 65 until SOP
     5ae:	10 c0       	rjmp	.+32     	; 0x5d0 <sendCntAndReti>
    sts     usbTxLen3, x1       ;[45] x1 == USBPID_NAK from above
     5b0:	00 93 c3 00 	sts	0x00C3, r16
    ldi     YL, lo8(usbTxBuf3)  ;[47]
     5b4:	c4 ec       	ldi	r28, 0xC4	; 196
    ldi     YH, hi8(usbTxBuf3)  ;[48]
     5b6:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[49] 51 + 12 = 63 until SOP
     5b8:	0f c0       	rjmp	.+30     	; 0x5d8 <usbSendAndReti>

000005ba <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
     5ba:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
     5bc:	a8 f4       	brcc	.+42     	; 0x5e8 <doExorN1>
    subi    x4, 1               ;[-3]
     5be:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
     5c0:	a9 f4       	brne	.+42     	; 0x5ec <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
     5c2:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
     5c4:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
     5c6:	f9 cf       	rjmp	.-14     	; 0x5ba <stuffN1Delay>

000005c8 <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
     5c8:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
     5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <usbSendX3>

000005cc <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
     5cc:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
     5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <usbSendX3>

000005d0 <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
     5d0:	43 2f       	mov	r20, r19

000005d2 <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
     5d2:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
     5d4:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
     5d6:	32 e0       	ldi	r19, 0x02	; 2

000005d8 <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
     5d8:	17 b3       	in	r17, 0x17	; 23
    ori     x2, USBMASK         ;[-11]
     5da:	13 60       	ori	r17, 0x03	; 3
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
     5dc:	c0 9a       	sbi	0x18, 0	; 24
    out     USBDDR, x2          ;[-8] <--- acquire bus
     5de:	17 bb       	out	0x17, r17	; 23
    in      x1, USBOUT          ;[-7] port mirror for tx loop
     5e0:	08 b3       	in	r16, 0x18	; 24
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
     5e2:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
     5e4:	13 e0       	ldi	r17, 0x03	; 3
    push    x4                  ;[-4]
     5e6:	5f 93       	push	r21

000005e8 <doExorN1>:
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
     5e8:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
     5ea:	56 e0       	ldi	r21, 0x06	; 6

000005ec <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
     5ec:	08 bb       	out	0x18, r16	; 24
    ror     shift               ;[01]
     5ee:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
     5f0:	20 f4       	brcc	.+8      	; 0x5fa <doExorN2>
    subi    x4, 1               ;[03]
     5f2:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
     5f4:	21 f4       	brne	.+8      	; 0x5fe <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
     5f6:	22 0f       	add	r18, r18
    rjmp    stuffN2Delay        ;[06] after ror, C bit is reliably clear
     5f8:	f9 cf       	rjmp	.-14     	; 0x5ec <commonN1>

000005fa <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
     5fa:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
     5fc:	56 e0       	ldi	r21, 0x06	; 6

000005fe <commonN2>:
commonN2:
    nop                         ;[06] [14]
     5fe:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
     600:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
     602:	08 bb       	out	0x18, r16	; 24
    brcs    txBitloop           ;[09]      [25] [41]
     604:	d0 f2       	brcs	.-76     	; 0x5ba <stuffN1Delay>

00000606 <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
     606:	27 95       	ror	r18
    brcc    doExor6             ;[43]
     608:	28 f4       	brcc	.+10     	; 0x614 <doExor6>
    subi    x4, 1               ;[44]
     60a:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
     60c:	29 f4       	brne	.+10     	; 0x618 <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
     60e:	22 0f       	add	r18, r18
    nop                         ;[47] stuffing consists of just waiting 8 cycles
     610:	00 00       	nop
    rjmp    stuff6Delay         ;[48] after ror, C bit is reliably clear
     612:	f9 cf       	rjmp	.-14     	; 0x606 <stuff6Delay>

00000614 <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
     614:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
     616:	56 e0       	ldi	r21, 0x06	; 6

00000618 <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
     618:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
     61a:	08 bb       	out	0x18, r16	; 24
    brcc    doExor7             ;[49]
     61c:	20 f4       	brcc	.+8      	; 0x626 <doExor7>
    subi    x4, 1               ;[50]
     61e:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
     620:	21 f4       	brne	.+8      	; 0x62a <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
     622:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
     624:	f9 cf       	rjmp	.-14     	; 0x618 <common6>

00000626 <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
     626:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
     628:	56 e0       	ldi	r21, 0x06	; 6

0000062a <common7>:
common7:
    ld      shift, y+           ;[53]
     62a:	29 91       	ld	r18, Y+
    tst     cnt                 ;[55]
     62c:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56] <--- set bit
     62e:	08 bb       	out	0x18, r16	; 24
    brne    txByteLoop          ;[57]
     630:	21 f6       	brne	.-120    	; 0x5ba <stuffN1Delay>

;make SE0:
    cbr     x1, USBMASK         ;[58] prepare SE0 [spec says EOP may be 15 to 18 cycles]
     632:	0c 7f       	andi	r16, 0xFC	; 252
    lds     x2, usbNewDeviceAddr;[59]
     634:	10 91 aa 00 	lds	r17, 0x00AA
    lsl     x2                  ;[61] we compare with left shifted address
     638:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[62] Only assign address on data packets, not ACK/NAK in x3
     63a:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0               ;[63]
     63c:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
     63e:	08 bb       	out	0x18, r16	; 24
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[01]
     640:	11 f0       	breq	.+4      	; 0x646 <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
     642:	10 93 a3 00 	sts	0x00A3, r17

00000646 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[03] int0 occurred during TX -- clear pending flag
     646:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[04]
     648:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE         ;[05]
     64a:	01 60       	ori	r16, 0x01	; 1
    in      x2, USBDDR          ;[06]
     64c:	17 b3       	in	r17, 0x17	; 23
    cbr     x2, USBMASK         ;[07] set both pins to input
     64e:	1c 7f       	andi	r17, 0xFC	; 252
    mov     x3, x1              ;[08]
     650:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[09] configure no pullup on both pins
     652:	4c 7f       	andi	r20, 0xFC	; 252
    pop     x4                  ;[10]
     654:	5f 91       	pop	r21
    nop2                        ;[12]
     656:	00 c0       	rjmp	.+0      	; 0x658 <skipAddrAssign+0x12>
    nop2                        ;[14]
     658:	00 c0       	rjmp	.+0      	; 0x65a <skipAddrAssign+0x14>
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
     65a:	08 bb       	out	0x18, r16	; 24
    out     USBDDR, x2          ;[17] <-- release bus now
     65c:	17 bb       	out	0x17, r17	; 23
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
     65e:	48 bb       	out	0x18, r20	; 24
    rjmp    doReturn
     660:	66 cf       	rjmp	.-308    	; 0x52e <doReturn>

00000662 <uartInit>:
uchar    rx_buf[RX_SIZE+HW_CDC_BULK_IN_SIZE], tx_buf[TX_SIZE];


void uartInit(ulong baudrate, uchar parity, uchar stopbits, uchar databits)
{
    setup();
     662:	30 c1       	rjmp	.+608    	; 0x8c4 <setup>

00000664 <usbGetch>:
}

int usbGetch()
{
    if (uwptr == irptr)
     664:	90 91 9a 01 	lds	r25, 0x019A
     668:	80 91 99 01 	lds	r24, 0x0199
     66c:	89 17       	cp	r24, r25
     66e:	59 f0       	breq	.+22     	; 0x686 <usbGetch+0x22>
        return -1;

    int ch = tx_buf[irptr];
     670:	e9 2f       	mov	r30, r25
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	e8 5a       	subi	r30, 0xA8	; 168
     676:	fe 4f       	sbci	r31, 0xFE	; 254
     678:	80 81       	ld	r24, Z
    irptr = (irptr+1) & TX_MASK;
     67a:	9f 5f       	subi	r25, 0xFF	; 255
     67c:	9f 73       	andi	r25, 0x3F	; 63
     67e:	90 93 9a 01 	sts	0x019A, r25

    return ch;
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	08 95       	ret
}

int usbGetch()
{
    if (uwptr == irptr)
        return -1;
     686:	8f ef       	ldi	r24, 0xFF	; 255
     688:	9f ef       	ldi	r25, 0xFF	; 255

    int ch = tx_buf[irptr];
    irptr = (irptr+1) & TX_MASK;

    return ch;
}
     68a:	08 95       	ret

0000068c <usbPutch>:

int usbPutch(uchar ch)
{
    uchar next = (iwptr+1) & RX_MASK;
     68c:	e0 91 57 01 	lds	r30, 0x0157
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	9e 0f       	add	r25, r30
     694:	9f 77       	andi	r25, 0x7F	; 127
    if (next == urptr)
     696:	20 91 98 01 	lds	r18, 0x0198
     69a:	92 17       	cp	r25, r18
     69c:	49 f0       	breq	.+18     	; 0x6b0 <usbPutch+0x24>
        return -1;

    rx_buf[iwptr] = ch;
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	e1 53       	subi	r30, 0x31	; 49
     6a2:	ff 4f       	sbci	r31, 0xFF	; 255
     6a4:	80 83       	st	Z, r24
    iwptr = next;
     6a6:	90 93 57 01 	sts	0x0157, r25
    return 0;
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	08 95       	ret

int usbPutch(uchar ch)
{
    uchar next = (iwptr+1) & RX_MASK;
    if (next == urptr)
        return -1;
     6b0:	8f ef       	ldi	r24, 0xFF	; 255
     6b2:	9f ef       	ldi	r25, 0xFF	; 255

    rx_buf[iwptr] = ch;
    iwptr = next;
    return 0;
}
     6b4:	08 95       	ret

000006b6 <doUsbTx>:

void doUsbTx(void )
{
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
    /*  USB <= device  */
    if( usbInterruptIsReady() && (iwptr!=urptr || sendEmptyFrame) ) {
     6ba:	80 91 97 00 	lds	r24, 0x0097
     6be:	84 ff       	sbrs	r24, 4
     6c0:	30 c0       	rjmp	.+96     	; 0x722 <doUsbTx+0x6c>
     6c2:	c0 91 57 01 	lds	r28, 0x0157
     6c6:	80 91 98 01 	lds	r24, 0x0198
     6ca:	c8 13       	cpse	r28, r24
     6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <doUsbTx+0x20>
     6ce:	90 91 9b 01 	lds	r25, 0x019B
     6d2:	99 23       	and	r25, r25
     6d4:	31 f1       	breq	.+76     	; 0x722 <doUsbTx+0x6c>
        uchar   bytesRead, i;

        bytesRead = (iwptr-urptr) & RX_MASK;
     6d6:	c8 1b       	sub	r28, r24
     6d8:	cf 77       	andi	r28, 0x7F	; 127
     6da:	c9 30       	cpi	r28, 0x09	; 9
     6dc:	08 f0       	brcs	.+2      	; 0x6e0 <doUsbTx+0x2a>
     6de:	c8 e0       	ldi	r28, 0x08	; 8
        if(bytesRead>HW_CDC_BULK_IN_SIZE)
            bytesRead = HW_CDC_BULK_IN_SIZE;
        uchar next    = urptr + bytesRead;
     6e0:	dc 2f       	mov	r29, r28
     6e2:	d8 0f       	add	r29, r24
        if( next>=RX_SIZE ) {
     6e4:	d7 ff       	sbrs	r29, 7
     6e6:	0d c0       	rjmp	.+26     	; 0x702 <doUsbTx+0x4c>
            next &= RX_MASK;
     6e8:	df 77       	andi	r29, 0x7F	; 127
     6ea:	2f ec       	ldi	r18, 0xCF	; 207
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	af e4       	ldi	r26, 0x4F	; 79
     6f0:	b1 e0       	ldi	r27, 0x01	; 1
            for( i=0; i<next; i++ )
     6f2:	f9 01       	movw	r30, r18
     6f4:	9e 2f       	mov	r25, r30
     6f6:	92 1b       	sub	r25, r18
     6f8:	9d 17       	cp	r25, r29
     6fa:	18 f4       	brcc	.+6      	; 0x702 <doUsbTx+0x4c>
                rx_buf[RX_SIZE+i]   = rx_buf[i];
     6fc:	91 91       	ld	r25, Z+
     6fe:	9d 93       	st	X+, r25
     700:	f9 cf       	rjmp	.-14     	; 0x6f4 <doUsbTx+0x3e>
        }
        usbSetInterrupt(rx_buf+urptr, bytesRead);
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	6c 2f       	mov	r22, r28
     706:	81 53       	subi	r24, 0x31	; 49
     708:	9f 4f       	sbci	r25, 0xFF	; 255
     70a:	13 dd       	rcall	.-1498   	; 0x132 <usbSetInterrupt>
        urptr = next;
     70c:	d0 93 98 01 	sts	0x0198, r29

        /* send an empty block after last data block to indicate transfer end */
        sendEmptyFrame = (bytesRead==HW_CDC_BULK_IN_SIZE && iwptr==urptr)? 1:0;
     710:	c8 30       	cpi	r28, 0x08	; 8
     712:	21 f4       	brne	.+8      	; 0x71c <doUsbTx+0x66>
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	90 91 57 01 	lds	r25, 0x0157
     71a:	9d 13       	cpse	r25, r29
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	80 93 9b 01 	sts	0x019B, r24
    }
}
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	08 95       	ret

00000728 <uartPoll>:

void uartPoll(void)
{
    repeat();
     728:	d9 d0       	rcall	.+434    	; 0x8dc <repeat>

    doUsbTx();
     72a:	c5 cf       	rjmp	.-118    	; 0x6b6 <doUsbTx>

0000072c <resetUart>:

static uchar        stopbit, parity, databit;
static usbDWord_t   baud;

static void resetUart(void)
{
     72c:	0f 93       	push	r16

    uartInit(baud.dword, parity, stopbit, databit);
     72e:	60 91 7c 00 	lds	r22, 0x007C
     732:	70 91 7d 00 	lds	r23, 0x007D
     736:	80 91 7e 00 	lds	r24, 0x007E
     73a:	90 91 7f 00 	lds	r25, 0x007F
     73e:	00 91 80 00 	lds	r16, 0x0080
     742:	20 91 82 00 	lds	r18, 0x0082
     746:	40 91 81 00 	lds	r20, 0x0081
     74a:	8b df       	rcall	.-234    	; 0x662 <uartInit>
    irptr    = 0;
     74c:	10 92 9a 01 	sts	0x019A, r1
    iwptr    = 0;
     750:	10 92 57 01 	sts	0x0157, r1
    urptr    = 0;
     754:	10 92 98 01 	sts	0x0198, r1
    uwptr    = 0;
     758:	10 92 99 01 	sts	0x0199, r1
}
     75c:	0f 91       	pop	r16
     75e:	08 95       	ret

00000760 <usbFunctionDescriptor>:


uchar usbFunctionDescriptor(usbRequest_t *rq)
{

    if(rq->wValue.bytes[1] == USBDESCR_DEVICE){
     760:	fc 01       	movw	r30, r24
     762:	83 81       	ldd	r24, Z+3	; 0x03
     764:	81 30       	cpi	r24, 0x01	; 1
     766:	49 f4       	brne	.+18     	; 0x77a <usbFunctionDescriptor+0x1a>
        usbMsgPtr = (uchar *)usbDescriptorDevice;
     768:	86 e2       	ldi	r24, 0x26	; 38
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	90 93 a8 00 	sts	0x00A8, r25
     770:	80 93 a7 00 	sts	0x00A7, r24
        return usbDescriptorDevice[0];
     774:	80 91 26 00 	lds	r24, 0x0026
     778:	08 95       	ret
    }else{  /* must be config descriptor */
        usbMsgPtr = (uchar *)configDescrCDC;
     77a:	8e e6       	ldi	r24, 0x6E	; 110
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	90 93 a8 00 	sts	0x00A8, r25
     782:	80 93 a7 00 	sts	0x00A7, r24
        return sizeof(configDescrCDC);
     786:	83 e4       	ldi	r24, 0x43	; 67
    }
}
     788:	08 95       	ret

0000078a <usbFunctionSetup>:

uchar usbFunctionSetup(uchar data[8])
{
usbRequest_t    *rq = (void *)data;

    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
     78a:	fc 01       	movw	r30, r24
     78c:	20 81       	ld	r18, Z
     78e:	32 2f       	mov	r19, r18
     790:	30 76       	andi	r19, 0x60	; 96
     792:	30 32       	cpi	r19, 0x20	; 32
     794:	a1 f4       	brne	.+40     	; 0x7be <usbFunctionSetup+0x34>

        if( rq->bRequest==GET_LINE_CODING || rq->bRequest==SET_LINE_CODING ){
     796:	fc 01       	movw	r30, r24
     798:	81 81       	ldd	r24, Z+1	; 0x01
     79a:	90 ee       	ldi	r25, 0xE0	; 224
     79c:	98 0f       	add	r25, r24
     79e:	92 30       	cpi	r25, 0x02	; 2
     7a0:	80 f0       	brcs	.+32     	; 0x7c2 <usbFunctionSetup+0x38>
            return 0xff;
        /*    GET_LINE_CODING -> usbFunctionRead()    */
        /*    SET_LINE_CODING -> usbFunctionWrite()    */
        }
        if(rq->bRequest == SET_CONTROL_LINE_STATE){
     7a2:	82 32       	cpi	r24, 0x22	; 34
     7a4:	39 f4       	brne	.+14     	; 0x7b4 <usbFunctionSetup+0x2a>

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
            /* Report serial state (carrier detect). On several Unix platforms,
             * tty devices can only be opened when carrier detect is set.
             */
            if( intr3Status==0 )
     7a6:	80 91 83 00 	lds	r24, 0x0083
     7aa:	81 11       	cpse	r24, r1
     7ac:	03 c0       	rjmp	.+6      	; 0x7b4 <usbFunctionSetup+0x2a>
                intr3Status = 2;
     7ae:	82 e0       	ldi	r24, 0x02	; 2
     7b0:	80 93 83 00 	sts	0x0083, r24
#endif
        }
#if 1
        /*  Prepare bulk-in endpoint to respond to early termination   */
        if((rq->bmRequestType & USBRQ_DIR_MASK) == USBRQ_DIR_HOST_TO_DEVICE)
     7b4:	27 fd       	sbrc	r18, 7
     7b6:	03 c0       	rjmp	.+6      	; 0x7be <usbFunctionSetup+0x34>
            sendEmptyFrame  = 1;
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	80 93 9b 01 	sts	0x019B, r24
#endif
    }

    return 0;
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	08 95       	ret
usbRequest_t    *rq = (void *)data;

    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */

        if( rq->bRequest==GET_LINE_CODING || rq->bRequest==SET_LINE_CODING ){
            return 0xff;
     7c2:	8f ef       	ldi	r24, 0xFF	; 255
            sendEmptyFrame  = 1;
#endif
    }

    return 0;
}
     7c4:	08 95       	ret

000007c6 <usbFunctionRead>:
/*---------------------------------------------------------------------------*/
/* usbFunctionRead                                                          */
/*---------------------------------------------------------------------------*/

uchar usbFunctionRead( uchar *data, uchar len )
{
     7c6:	fc 01       	movw	r30, r24

    data[0] = baud.bytes[0];
     7c8:	80 91 7c 00 	lds	r24, 0x007C
     7cc:	80 83       	st	Z, r24
    data[1] = baud.bytes[1];
     7ce:	80 91 7d 00 	lds	r24, 0x007D
     7d2:	81 83       	std	Z+1, r24	; 0x01
    data[2] = baud.bytes[2];
     7d4:	80 91 7e 00 	lds	r24, 0x007E
     7d8:	82 83       	std	Z+2, r24	; 0x02
    data[3] = baud.bytes[3];
     7da:	80 91 7f 00 	lds	r24, 0x007F
     7de:	83 83       	std	Z+3, r24	; 0x03
    data[4] = stopbit;
     7e0:	80 91 82 00 	lds	r24, 0x0082
     7e4:	84 83       	std	Z+4, r24	; 0x04
    data[5] = parity;
     7e6:	80 91 81 00 	lds	r24, 0x0081
     7ea:	85 83       	std	Z+5, r24	; 0x05
    data[6] = databit;
     7ec:	80 91 80 00 	lds	r24, 0x0080
     7f0:	86 83       	std	Z+6, r24	; 0x06

    return 7;
}
     7f2:	87 e0       	ldi	r24, 0x07	; 7
     7f4:	08 95       	ret

000007f6 <usbFunctionWrite>:
/*---------------------------------------------------------------------------*/
/* usbFunctionWrite                                                          */
/*---------------------------------------------------------------------------*/

uchar usbFunctionWrite( uchar *data, uchar len )
{
     7f6:	fc 01       	movw	r30, r24

    /*    SET_LINE_CODING    */
    baud.bytes[0] = data[0];
     7f8:	80 81       	ld	r24, Z
     7fa:	80 93 7c 00 	sts	0x007C, r24
    baud.bytes[1] = data[1];
     7fe:	81 81       	ldd	r24, Z+1	; 0x01
     800:	80 93 7d 00 	sts	0x007D, r24
    baud.bytes[2] = data[2];
     804:	82 81       	ldd	r24, Z+2	; 0x02
     806:	80 93 7e 00 	sts	0x007E, r24
    baud.bytes[3] = data[3];
     80a:	83 81       	ldd	r24, Z+3	; 0x03
     80c:	80 93 7f 00 	sts	0x007F, r24

    stopbit    = data[4];
     810:	84 81       	ldd	r24, Z+4	; 0x04
     812:	80 93 82 00 	sts	0x0082, r24
    parity     = data[5];
     816:	95 81       	ldd	r25, Z+5	; 0x05
     818:	90 93 81 00 	sts	0x0081, r25
    databit    = data[6];
     81c:	26 81       	ldd	r18, Z+6	; 0x06
     81e:	20 93 80 00 	sts	0x0080, r18

    if( parity>2 )
     822:	93 30       	cpi	r25, 0x03	; 3
     824:	10 f0       	brcs	.+4      	; 0x82a <usbFunctionWrite+0x34>
        parity    = 0;
     826:	10 92 81 00 	sts	0x0081, r1
    if( stopbit==1 )
     82a:	81 30       	cpi	r24, 0x01	; 1
     82c:	11 f4       	brne	.+4      	; 0x832 <usbFunctionWrite+0x3c>
        stopbit    = 0;
     82e:	10 92 82 00 	sts	0x0082, r1

    resetUart();
     832:	7c df       	rcall	.-264    	; 0x72c <resetUart>

    return 1;
}
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	08 95       	ret

00000838 <usbFunctionWriteOut>:
    /*  usb -> rs232c:  transmit char    */
    for( ; len; len-- ) {
        uchar   uwnxt;

        uwnxt = (uwptr+1) & TX_MASK;
        if( uwnxt!=irptr ) {
     838:	30 91 9a 01 	lds	r19, 0x019A
     83c:	e0 91 99 01 	lds	r30, 0x0199

void usbFunctionWriteOut( uchar *data, uchar len )
{

    /*  usb -> rs232c:  transmit char    */
    for( ; len; len-- ) {
     840:	66 23       	and	r22, r22
     842:	81 f0       	breq	.+32     	; 0x864 <usbFunctionWriteOut+0x2c>
        uchar   uwnxt;

        uwnxt = (uwptr+1) & TX_MASK;
     844:	21 e0       	ldi	r18, 0x01	; 1
     846:	2e 0f       	add	r18, r30
     848:	2f 73       	andi	r18, 0x3F	; 63
        if( uwnxt!=irptr ) {
     84a:	23 17       	cp	r18, r19
     84c:	49 f0       	breq	.+18     	; 0x860 <usbFunctionWriteOut+0x28>
            tx_buf[uwptr] = *data++;
     84e:	dc 01       	movw	r26, r24
     850:	4c 91       	ld	r20, X
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	e8 5a       	subi	r30, 0xA8	; 168
     856:	fe 4f       	sbci	r31, 0xFE	; 254
     858:	40 83       	st	Z, r20
            uwptr = uwnxt;
     85a:	20 93 99 01 	sts	0x0199, r18
    for( ; len; len-- ) {
        uchar   uwnxt;

        uwnxt = (uwptr+1) & TX_MASK;
        if( uwnxt!=irptr ) {
            tx_buf[uwptr] = *data++;
     85e:	01 96       	adiw	r24, 0x01	; 1

void usbFunctionWriteOut( uchar *data, uchar len )
{

    /*  usb -> rs232c:  transmit char    */
    for( ; len; len-- ) {
     860:	61 50       	subi	r22, 0x01	; 1
     862:	ec cf       	rjmp	.-40     	; 0x83c <usbFunctionWriteOut+0x4>
/* The following function returns the amount of bytes available in the TX
 * buffer before we have an overflow.
 */
static inline uchar uartTxBytesFree(void)
{
    return (irptr - uwptr - 1) & TX_MASK;
     864:	8f ef       	ldi	r24, 0xFF	; 255
     866:	83 0f       	add	r24, r19
     868:	8e 1b       	sub	r24, r30
     86a:	8f 73       	andi	r24, 0x3F	; 63
            uwptr = uwnxt;
        }
    }

    /*  postpone receiving next data    */
    if( uartTxBytesFree()<=HW_CDC_BULK_OUT_SIZE )
     86c:	89 30       	cpi	r24, 0x09	; 9
     86e:	18 f4       	brcc	.+6      	; 0x876 <usbFunctionWriteOut+0x3e>
        usbDisableAllRequests();
     870:	8f ef       	ldi	r24, 0xFF	; 255
     872:	80 93 a9 00 	sts	0x00A9, r24
     876:	08 95       	ret

00000878 <usbPuts>:

#define TIMERRATE     10000
#define TIMERTOP  F_CPU / TIMERRATE / 8

int usbPuts (char *s)
{
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	ec 01       	movw	r28, r24
  while (*s)
     87e:	89 91       	ld	r24, Y+
     880:	88 23       	and	r24, r24
     882:	11 f0       	breq	.+4      	; 0x888 <usbPuts+0x10>
    usbPutch(*s++);
     884:	03 df       	rcall	.-506    	; 0x68c <usbPutch>
     886:	fb cf       	rjmp	.-10     	; 0x87e <usbPuts+0x6>
  return 0;
}
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	08 95       	ret

00000892 <__vector_9>:

int deciMilli = 0;
u32 milliSecs = 0;
ISR(TIMER0_OVF_vect)
{
     892:	1f 92       	push	r1
     894:	0f 92       	push	r0
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	0f 92       	push	r0
     89a:	11 24       	eor	r1, r1
     89c:	8f 93       	push	r24
     89e:	9f 93       	push	r25
	deciMilli++;
     8a0:	80 91 8a 00 	lds	r24, 0x008A
     8a4:	90 91 8b 00 	lds	r25, 0x008B
     8a8:	01 96       	adiw	r24, 0x01	; 1
     8aa:	90 93 8b 00 	sts	0x008B, r25
     8ae:	80 93 8a 00 	sts	0x008A, r24
    TCNT0 = 255 - TIMERTOP;
     8b2:	89 e6       	ldi	r24, 0x69	; 105
     8b4:	82 bf       	out	0x32, r24	; 50
}
     8b6:	9f 91       	pop	r25
     8b8:	8f 91       	pop	r24
     8ba:	0f 90       	pop	r0
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	0f 90       	pop	r0
     8c0:	1f 90       	pop	r1
     8c2:	18 95       	reti

000008c4 <setup>:

uchar line[50];
uchar *linep;
extern void setup(void)
{
  linep = line;
     8c4:	8e ea       	ldi	r24, 0xAE	; 174
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	90 93 ad 01 	sts	0x01AD, r25
     8cc:	80 93 ac 01 	sts	0x01AC, r24

  TCCR0 = BIT(CS01);    // Timer0 /8 clock prescaler
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	83 bf       	out	0x33, r24	; 51
  SBIT(TIMSK, TOIE0) = 1;
     8d4:	89 b7       	in	r24, 0x39	; 57
     8d6:	81 60       	ori	r24, 0x01	; 1
     8d8:	89 bf       	out	0x39, r24	; 57
     8da:	08 95       	ret

000008dc <repeat>:

int csCnt = 0;
char str[60];
#define SPRINT(fmt, ...) (sprintf(str, fmt "\n", ##__VA_ARGS__), str)
extern void repeat(void)
{
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
  csCnt++;
     8e0:	c0 91 84 00 	lds	r28, 0x0084
     8e4:	d0 91 85 00 	lds	r29, 0x0085
     8e8:	21 96       	adiw	r28, 0x01	; 1
     8ea:	d0 93 85 00 	sts	0x0085, r29
     8ee:	c0 93 84 00 	sts	0x0084, r28
  if (deciMilli >= 10) {
     8f2:	80 91 8a 00 	lds	r24, 0x008A
     8f6:	90 91 8b 00 	lds	r25, 0x008B
     8fa:	8a 30       	cpi	r24, 0x0A	; 10
     8fc:	91 05       	cpc	r25, r1
     8fe:	0c f4       	brge	.+2      	; 0x902 <repeat+0x26>
     900:	5a c0       	rjmp	.+180    	; 0x9b6 <repeat+0xda>
    deciMilli -= 10;
     902:	0a 97       	sbiw	r24, 0x0a	; 10
     904:	90 93 8b 00 	sts	0x008B, r25
     908:	80 93 8a 00 	sts	0x008A, r24
    milliSecs++;
     90c:	60 91 86 00 	lds	r22, 0x0086
     910:	70 91 87 00 	lds	r23, 0x0087
     914:	80 91 88 00 	lds	r24, 0x0088
     918:	90 91 89 00 	lds	r25, 0x0089
     91c:	6f 5f       	subi	r22, 0xFF	; 255
     91e:	7f 4f       	sbci	r23, 0xFF	; 255
     920:	8f 4f       	sbci	r24, 0xFF	; 255
     922:	9f 4f       	sbci	r25, 0xFF	; 255
     924:	60 93 86 00 	sts	0x0086, r22
     928:	70 93 87 00 	sts	0x0087, r23
     92c:	80 93 88 00 	sts	0x0088, r24
     930:	90 93 89 00 	sts	0x0089, r25
  }
  else
    return;

  if (0 == (milliSecs % 10000)) {
     934:	20 e1       	ldi	r18, 0x10	; 16
     936:	37 e2       	ldi	r19, 0x27	; 39
     938:	40 e0       	ldi	r20, 0x00	; 0
     93a:	50 e0       	ldi	r21, 0x00	; 0
     93c:	88 d0       	rcall	.+272    	; 0xa4e <__udivmodsi4>
     93e:	67 2b       	or	r22, r23
     940:	68 2b       	or	r22, r24
     942:	69 2b       	or	r22, r25
     944:	a1 f4       	brne	.+40     	; 0x96e <repeat+0x92>
    usbPuts(SPRINT("Hello world %d", csCnt));
     946:	df 93       	push	r29
     948:	cf 93       	push	r28
     94a:	8c e6       	ldi	r24, 0x6C	; 108
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	9f 93       	push	r25
     950:	8f 93       	push	r24
     952:	80 ee       	ldi	r24, 0xE0	; 224
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	9f 93       	push	r25
     958:	8f 93       	push	r24
     95a:	9b d0       	rcall	.+310    	; 0xa92 <sprintf>
     95c:	80 ee       	ldi	r24, 0xE0	; 224
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	8b df       	rcall	.-234    	; 0x878 <usbPuts>
     962:	0f 90       	pop	r0
     964:	0f 90       	pop	r0
     966:	0f 90       	pop	r0
     968:	0f 90       	pop	r0
     96a:	0f 90       	pop	r0
     96c:	0f 90       	pop	r0
  }
  csCnt = 0;
     96e:	10 92 85 00 	sts	0x0085, r1
     972:	10 92 84 00 	sts	0x0084, r1

  do {
    int ch = usbGetch();
     976:	76 de       	rcall	.-788    	; 0x664 <usbGetch>
    if (ch < 0)
     978:	97 fd       	sbrc	r25, 7
     97a:	1d c0       	rjmp	.+58     	; 0x9b6 <repeat+0xda>
      return;
    linep = linep == NULL ? linep : linep + 1;
     97c:	e0 91 ac 01 	lds	r30, 0x01AC
     980:	f0 91 ad 01 	lds	r31, 0x01AD
     984:	30 97       	sbiw	r30, 0x00	; 0
     986:	11 f0       	breq	.+4      	; 0x98c <repeat+0xb0>
     988:	31 96       	adiw	r30, 0x01	; 1
     98a:	02 c0       	rjmp	.+4      	; 0x990 <repeat+0xb4>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	f0 93 ad 01 	sts	0x01AD, r31
     994:	e0 93 ac 01 	sts	0x01AC, r30
    *linep = ch;
     998:	80 83       	st	Z, r24
  } while (*linep != '\r' && *linep != '\n' && linep != line + sizeof(line) - 1);
     99a:	e0 91 ac 01 	lds	r30, 0x01AC
     99e:	f0 91 ad 01 	lds	r31, 0x01AD
     9a2:	80 81       	ld	r24, Z
     9a4:	8d 30       	cpi	r24, 0x0D	; 13
     9a6:	31 f0       	breq	.+12     	; 0x9b4 <repeat+0xd8>
     9a8:	8a 30       	cpi	r24, 0x0A	; 10
     9aa:	21 f0       	breq	.+8      	; 0x9b4 <repeat+0xd8>
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	ef 3d       	cpi	r30, 0xDF	; 223
     9b0:	f8 07       	cpc	r31, r24
     9b2:	09 f7       	brne	.-62     	; 0x976 <repeat+0x9a>

  *linep = '\0';
     9b4:	10 82       	st	Z, r1

  if (0 == strcmp(line, "init"))
      initPins;

}
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	08 95       	ret

000009bc <main>:


int main(void)
{

    wdt_enable(WDTO_1S);
     9bc:	2e e0       	ldi	r18, 0x0E	; 14
     9be:	88 e1       	ldi	r24, 0x18	; 24
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	f8 94       	cli
     9c6:	a8 95       	wdr
     9c8:	81 bd       	out	0x21, r24	; 33
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	21 bd       	out	0x21, r18	; 33

static void hardwareInit(void)
{

    /* activate pull-ups except on USB lines */
    USB_CFG_IOPORT   = (uchar)~((1<<USB_CFG_DMINUS_BIT)|(1<<USB_CFG_DPLUS_BIT));
     9ce:	8c ef       	ldi	r24, 0xFC	; 252
     9d0:	88 bb       	out	0x18, r24	; 24
    /* all pins input except USB (-> USB reset) */
#ifdef USB_CFG_PULLUP_IOPORT    /* use usbDeviceConnect()/usbDeviceDisconnect() if available */
    USBDDR    = 0;    /* we do RESET by deactivating pullup */
    usbDeviceDisconnect();
#else
    USBDDR    = (1<<USB_CFG_DMINUS_BIT)|(1<<USB_CFG_DPLUS_BIT);
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	87 bb       	out	0x17, r24	; 23
#endif

    /* 250 ms disconnect */
    wdt_reset();
     9d6:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9d8:	2f eb       	ldi	r18, 0xBF	; 191
     9da:	87 e2       	ldi	r24, 0x27	; 39
     9dc:	99 e0       	ldi	r25, 0x09	; 9
     9de:	21 50       	subi	r18, 0x01	; 1
     9e0:	80 40       	sbci	r24, 0x00	; 0
     9e2:	90 40       	sbci	r25, 0x00	; 0
     9e4:	e1 f7       	brne	.-8      	; 0x9de <main+0x22>
     9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <main+0x2c>
     9e8:	00 00       	nop
    _delay_ms(250);

#ifdef USB_CFG_PULLUP_IOPORT
    usbDeviceConnect();
#else
    USBDDR    = 0;      /*  remove USB reset condition */
     9ea:	17 ba       	out	0x17, r1	; 23
#endif

    /*    USART configuration    */
    baud.dword  = 0;
     9ec:	10 92 7c 00 	sts	0x007C, r1
     9f0:	10 92 7d 00 	sts	0x007D, r1
     9f4:	10 92 7e 00 	sts	0x007E, r1
     9f8:	10 92 7f 00 	sts	0x007F, r1
    stopbit = 0;
     9fc:	10 92 82 00 	sts	0x0082, r1
    parity  = 0;
     a00:	10 92 81 00 	sts	0x0081, r1
    databit = 8;
     a04:	88 e0       	ldi	r24, 0x08	; 8
     a06:	80 93 80 00 	sts	0x0080, r24
    resetUart();
     a0a:	90 de       	rcall	.-736    	; 0x72c <resetUart>
{

    wdt_enable(WDTO_1S);
    odDebugInit();
    hardwareInit();
    usbInit();
     a0c:	b8 dc       	rcall	.-1680   	; 0x37e <usbInit>

    intr3Status = 0;
     a0e:	10 92 83 00 	sts	0x0083, r1
    sendEmptyFrame  = 0;
     a12:	10 92 9b 01 	sts	0x019B, r1

    sei();
     a16:	78 94       	sei
    for(;;){    /* main event loop */
        wdt_reset();
     a18:	a8 95       	wdr
        usbPoll();
     a1a:	91 db       	rcall	.-2270   	; 0x13e <usbPoll>
        uartPoll();
     a1c:	85 de       	rcall	.-758    	; 0x728 <uartPoll>

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
        /* We need to report rx and tx carrier after open attempt */
        if(intr3Status != 0 && usbInterruptIsReady3()){
     a1e:	80 91 83 00 	lds	r24, 0x0083
     a22:	88 23       	and	r24, r24
     a24:	c9 f3       	breq	.-14     	; 0xa18 <main+0x5c>
     a26:	90 91 c3 00 	lds	r25, 0x00C3
     a2a:	94 ff       	sbrs	r25, 4
     a2c:	f5 cf       	rjmp	.-22     	; 0xa18 <main+0x5c>
            static uchar serialStateNotification[10] = {0xa1, 0x20, 0, 0, 0, 0, 2, 0, 3, 0};

            if(intr3Status == 2){
     a2e:	82 30       	cpi	r24, 0x02	; 2
     a30:	21 f4       	brne	.+8      	; 0xa3a <main+0x7e>
                usbSetInterrupt3(serialStateNotification, 8);
     a32:	68 e0       	ldi	r22, 0x08	; 8
     a34:	82 e6       	ldi	r24, 0x62	; 98
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	03 c0       	rjmp	.+6      	; 0xa40 <main+0x84>
            }else{
                usbSetInterrupt3(serialStateNotification+8, 2);
     a3a:	62 e0       	ldi	r22, 0x02	; 2
     a3c:	8a e6       	ldi	r24, 0x6A	; 106
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	7b db       	rcall	.-2314   	; 0x138 <usbSetInterrupt3>
            }
            intr3Status--;
     a42:	80 91 83 00 	lds	r24, 0x0083
     a46:	81 50       	subi	r24, 0x01	; 1
     a48:	80 93 83 00 	sts	0x0083, r24
     a4c:	e5 cf       	rjmp	.-54     	; 0xa18 <main+0x5c>

00000a4e <__udivmodsi4>:
     a4e:	a1 e2       	ldi	r26, 0x21	; 33
     a50:	1a 2e       	mov	r1, r26
     a52:	aa 1b       	sub	r26, r26
     a54:	bb 1b       	sub	r27, r27
     a56:	fd 01       	movw	r30, r26
     a58:	0d c0       	rjmp	.+26     	; 0xa74 <__udivmodsi4_ep>

00000a5a <__udivmodsi4_loop>:
     a5a:	aa 1f       	adc	r26, r26
     a5c:	bb 1f       	adc	r27, r27
     a5e:	ee 1f       	adc	r30, r30
     a60:	ff 1f       	adc	r31, r31
     a62:	a2 17       	cp	r26, r18
     a64:	b3 07       	cpc	r27, r19
     a66:	e4 07       	cpc	r30, r20
     a68:	f5 07       	cpc	r31, r21
     a6a:	20 f0       	brcs	.+8      	; 0xa74 <__udivmodsi4_ep>
     a6c:	a2 1b       	sub	r26, r18
     a6e:	b3 0b       	sbc	r27, r19
     a70:	e4 0b       	sbc	r30, r20
     a72:	f5 0b       	sbc	r31, r21

00000a74 <__udivmodsi4_ep>:
     a74:	66 1f       	adc	r22, r22
     a76:	77 1f       	adc	r23, r23
     a78:	88 1f       	adc	r24, r24
     a7a:	99 1f       	adc	r25, r25
     a7c:	1a 94       	dec	r1
     a7e:	69 f7       	brne	.-38     	; 0xa5a <__udivmodsi4_loop>
     a80:	60 95       	com	r22
     a82:	70 95       	com	r23
     a84:	80 95       	com	r24
     a86:	90 95       	com	r25
     a88:	9b 01       	movw	r18, r22
     a8a:	ac 01       	movw	r20, r24
     a8c:	bd 01       	movw	r22, r26
     a8e:	cf 01       	movw	r24, r30
     a90:	08 95       	ret

00000a92 <sprintf>:
     a92:	ae e0       	ldi	r26, 0x0E	; 14
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	ee e4       	ldi	r30, 0x4E	; 78
     a98:	f5 e0       	ldi	r31, 0x05	; 5
     a9a:	91 c2       	rjmp	.+1314   	; 0xfbe <__prologue_saves__+0x1c>
     a9c:	0d 89       	ldd	r16, Y+21	; 0x15
     a9e:	1e 89       	ldd	r17, Y+22	; 0x16
     aa0:	86 e0       	ldi	r24, 0x06	; 6
     aa2:	8c 83       	std	Y+4, r24	; 0x04
     aa4:	1a 83       	std	Y+2, r17	; 0x02
     aa6:	09 83       	std	Y+1, r16	; 0x01
     aa8:	8f ef       	ldi	r24, 0xFF	; 255
     aaa:	9f e7       	ldi	r25, 0x7F	; 127
     aac:	9e 83       	std	Y+6, r25	; 0x06
     aae:	8d 83       	std	Y+5, r24	; 0x05
     ab0:	ae 01       	movw	r20, r28
     ab2:	47 5e       	subi	r20, 0xE7	; 231
     ab4:	5f 4f       	sbci	r21, 0xFF	; 255
     ab6:	6f 89       	ldd	r22, Y+23	; 0x17
     ab8:	78 8d       	ldd	r23, Y+24	; 0x18
     aba:	ce 01       	movw	r24, r28
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	08 d0       	rcall	.+16     	; 0xad0 <vfprintf>
     ac0:	ef 81       	ldd	r30, Y+7	; 0x07
     ac2:	f8 85       	ldd	r31, Y+8	; 0x08
     ac4:	e0 0f       	add	r30, r16
     ac6:	f1 1f       	adc	r31, r17
     ac8:	10 82       	st	Z, r1
     aca:	2e 96       	adiw	r28, 0x0e	; 14
     acc:	e4 e0       	ldi	r30, 0x04	; 4
     ace:	93 c2       	rjmp	.+1318   	; 0xff6 <__epilogue_restores__+0x1c>

00000ad0 <vfprintf>:
     ad0:	ac e0       	ldi	r26, 0x0C	; 12
     ad2:	b0 e0       	ldi	r27, 0x00	; 0
     ad4:	ed e6       	ldi	r30, 0x6D	; 109
     ad6:	f5 e0       	ldi	r31, 0x05	; 5
     ad8:	64 c2       	rjmp	.+1224   	; 0xfa2 <__prologue_saves__>
     ada:	7c 01       	movw	r14, r24
     adc:	6b 01       	movw	r12, r22
     ade:	8a 01       	movw	r16, r20
     ae0:	fc 01       	movw	r30, r24
     ae2:	17 82       	std	Z+7, r1	; 0x07
     ae4:	16 82       	std	Z+6, r1	; 0x06
     ae6:	83 81       	ldd	r24, Z+3	; 0x03
     ae8:	81 ff       	sbrs	r24, 1
     aea:	b0 c1       	rjmp	.+864    	; 0xe4c <vfprintf+0x37c>
     aec:	ce 01       	movw	r24, r28
     aee:	01 96       	adiw	r24, 0x01	; 1
     af0:	4c 01       	movw	r8, r24
     af2:	f7 01       	movw	r30, r14
     af4:	93 81       	ldd	r25, Z+3	; 0x03
     af6:	f6 01       	movw	r30, r12
     af8:	93 fd       	sbrc	r25, 3
     afa:	85 91       	lpm	r24, Z+
     afc:	93 ff       	sbrs	r25, 3
     afe:	81 91       	ld	r24, Z+
     b00:	6f 01       	movw	r12, r30
     b02:	88 23       	and	r24, r24
     b04:	09 f4       	brne	.+2      	; 0xb08 <vfprintf+0x38>
     b06:	9e c1       	rjmp	.+828    	; 0xe44 <vfprintf+0x374>
     b08:	85 32       	cpi	r24, 0x25	; 37
     b0a:	39 f4       	brne	.+14     	; 0xb1a <vfprintf+0x4a>
     b0c:	93 fd       	sbrc	r25, 3
     b0e:	85 91       	lpm	r24, Z+
     b10:	93 ff       	sbrs	r25, 3
     b12:	81 91       	ld	r24, Z+
     b14:	6f 01       	movw	r12, r30
     b16:	85 32       	cpi	r24, 0x25	; 37
     b18:	21 f4       	brne	.+8      	; 0xb22 <vfprintf+0x52>
     b1a:	b7 01       	movw	r22, r14
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	b1 d1       	rcall	.+866    	; 0xe82 <fputc>
     b20:	e8 cf       	rjmp	.-48     	; 0xaf2 <vfprintf+0x22>
     b22:	51 2c       	mov	r5, r1
     b24:	31 2c       	mov	r3, r1
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	20 32       	cpi	r18, 0x20	; 32
     b2a:	a0 f4       	brcc	.+40     	; 0xb54 <vfprintf+0x84>
     b2c:	8b 32       	cpi	r24, 0x2B	; 43
     b2e:	69 f0       	breq	.+26     	; 0xb4a <vfprintf+0x7a>
     b30:	30 f4       	brcc	.+12     	; 0xb3e <vfprintf+0x6e>
     b32:	80 32       	cpi	r24, 0x20	; 32
     b34:	59 f0       	breq	.+22     	; 0xb4c <vfprintf+0x7c>
     b36:	83 32       	cpi	r24, 0x23	; 35
     b38:	69 f4       	brne	.+26     	; 0xb54 <vfprintf+0x84>
     b3a:	20 61       	ori	r18, 0x10	; 16
     b3c:	2c c0       	rjmp	.+88     	; 0xb96 <vfprintf+0xc6>
     b3e:	8d 32       	cpi	r24, 0x2D	; 45
     b40:	39 f0       	breq	.+14     	; 0xb50 <vfprintf+0x80>
     b42:	80 33       	cpi	r24, 0x30	; 48
     b44:	39 f4       	brne	.+14     	; 0xb54 <vfprintf+0x84>
     b46:	21 60       	ori	r18, 0x01	; 1
     b48:	26 c0       	rjmp	.+76     	; 0xb96 <vfprintf+0xc6>
     b4a:	22 60       	ori	r18, 0x02	; 2
     b4c:	24 60       	ori	r18, 0x04	; 4
     b4e:	23 c0       	rjmp	.+70     	; 0xb96 <vfprintf+0xc6>
     b50:	28 60       	ori	r18, 0x08	; 8
     b52:	21 c0       	rjmp	.+66     	; 0xb96 <vfprintf+0xc6>
     b54:	27 fd       	sbrc	r18, 7
     b56:	27 c0       	rjmp	.+78     	; 0xba6 <vfprintf+0xd6>
     b58:	30 ed       	ldi	r19, 0xD0	; 208
     b5a:	38 0f       	add	r19, r24
     b5c:	3a 30       	cpi	r19, 0x0A	; 10
     b5e:	78 f4       	brcc	.+30     	; 0xb7e <vfprintf+0xae>
     b60:	26 ff       	sbrs	r18, 6
     b62:	06 c0       	rjmp	.+12     	; 0xb70 <vfprintf+0xa0>
     b64:	fa e0       	ldi	r31, 0x0A	; 10
     b66:	5f 9e       	mul	r5, r31
     b68:	30 0d       	add	r19, r0
     b6a:	11 24       	eor	r1, r1
     b6c:	53 2e       	mov	r5, r19
     b6e:	13 c0       	rjmp	.+38     	; 0xb96 <vfprintf+0xc6>
     b70:	8a e0       	ldi	r24, 0x0A	; 10
     b72:	38 9e       	mul	r3, r24
     b74:	30 0d       	add	r19, r0
     b76:	11 24       	eor	r1, r1
     b78:	33 2e       	mov	r3, r19
     b7a:	20 62       	ori	r18, 0x20	; 32
     b7c:	0c c0       	rjmp	.+24     	; 0xb96 <vfprintf+0xc6>
     b7e:	8e 32       	cpi	r24, 0x2E	; 46
     b80:	21 f4       	brne	.+8      	; 0xb8a <vfprintf+0xba>
     b82:	26 fd       	sbrc	r18, 6
     b84:	5f c1       	rjmp	.+702    	; 0xe44 <vfprintf+0x374>
     b86:	20 64       	ori	r18, 0x40	; 64
     b88:	06 c0       	rjmp	.+12     	; 0xb96 <vfprintf+0xc6>
     b8a:	8c 36       	cpi	r24, 0x6C	; 108
     b8c:	11 f4       	brne	.+4      	; 0xb92 <vfprintf+0xc2>
     b8e:	20 68       	ori	r18, 0x80	; 128
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <vfprintf+0xc6>
     b92:	88 36       	cpi	r24, 0x68	; 104
     b94:	41 f4       	brne	.+16     	; 0xba6 <vfprintf+0xd6>
     b96:	f6 01       	movw	r30, r12
     b98:	93 fd       	sbrc	r25, 3
     b9a:	85 91       	lpm	r24, Z+
     b9c:	93 ff       	sbrs	r25, 3
     b9e:	81 91       	ld	r24, Z+
     ba0:	6f 01       	movw	r12, r30
     ba2:	81 11       	cpse	r24, r1
     ba4:	c1 cf       	rjmp	.-126    	; 0xb28 <vfprintf+0x58>
     ba6:	98 2f       	mov	r25, r24
     ba8:	9f 7d       	andi	r25, 0xDF	; 223
     baa:	95 54       	subi	r25, 0x45	; 69
     bac:	93 30       	cpi	r25, 0x03	; 3
     bae:	28 f4       	brcc	.+10     	; 0xbba <vfprintf+0xea>
     bb0:	0c 5f       	subi	r16, 0xFC	; 252
     bb2:	1f 4f       	sbci	r17, 0xFF	; 255
     bb4:	ff e3       	ldi	r31, 0x3F	; 63
     bb6:	f9 83       	std	Y+1, r31	; 0x01
     bb8:	0d c0       	rjmp	.+26     	; 0xbd4 <vfprintf+0x104>
     bba:	83 36       	cpi	r24, 0x63	; 99
     bbc:	31 f0       	breq	.+12     	; 0xbca <vfprintf+0xfa>
     bbe:	83 37       	cpi	r24, 0x73	; 115
     bc0:	71 f0       	breq	.+28     	; 0xbde <vfprintf+0x10e>
     bc2:	83 35       	cpi	r24, 0x53	; 83
     bc4:	09 f0       	breq	.+2      	; 0xbc8 <vfprintf+0xf8>
     bc6:	57 c0       	rjmp	.+174    	; 0xc76 <vfprintf+0x1a6>
     bc8:	21 c0       	rjmp	.+66     	; 0xc0c <vfprintf+0x13c>
     bca:	f8 01       	movw	r30, r16
     bcc:	80 81       	ld	r24, Z
     bce:	89 83       	std	Y+1, r24	; 0x01
     bd0:	0e 5f       	subi	r16, 0xFE	; 254
     bd2:	1f 4f       	sbci	r17, 0xFF	; 255
     bd4:	44 24       	eor	r4, r4
     bd6:	43 94       	inc	r4
     bd8:	51 2c       	mov	r5, r1
     bda:	54 01       	movw	r10, r8
     bdc:	14 c0       	rjmp	.+40     	; 0xc06 <vfprintf+0x136>
     bde:	38 01       	movw	r6, r16
     be0:	f2 e0       	ldi	r31, 0x02	; 2
     be2:	6f 0e       	add	r6, r31
     be4:	71 1c       	adc	r7, r1
     be6:	f8 01       	movw	r30, r16
     be8:	a0 80       	ld	r10, Z
     bea:	b1 80       	ldd	r11, Z+1	; 0x01
     bec:	26 ff       	sbrs	r18, 6
     bee:	03 c0       	rjmp	.+6      	; 0xbf6 <vfprintf+0x126>
     bf0:	65 2d       	mov	r22, r5
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <vfprintf+0x12a>
     bf6:	6f ef       	ldi	r22, 0xFF	; 255
     bf8:	7f ef       	ldi	r23, 0xFF	; 255
     bfa:	c5 01       	movw	r24, r10
     bfc:	2c 87       	std	Y+12, r18	; 0x0c
     bfe:	36 d1       	rcall	.+620    	; 0xe6c <strnlen>
     c00:	2c 01       	movw	r4, r24
     c02:	83 01       	movw	r16, r6
     c04:	2c 85       	ldd	r18, Y+12	; 0x0c
     c06:	2f 77       	andi	r18, 0x7F	; 127
     c08:	22 2e       	mov	r2, r18
     c0a:	16 c0       	rjmp	.+44     	; 0xc38 <vfprintf+0x168>
     c0c:	38 01       	movw	r6, r16
     c0e:	f2 e0       	ldi	r31, 0x02	; 2
     c10:	6f 0e       	add	r6, r31
     c12:	71 1c       	adc	r7, r1
     c14:	f8 01       	movw	r30, r16
     c16:	a0 80       	ld	r10, Z
     c18:	b1 80       	ldd	r11, Z+1	; 0x01
     c1a:	26 ff       	sbrs	r18, 6
     c1c:	03 c0       	rjmp	.+6      	; 0xc24 <vfprintf+0x154>
     c1e:	65 2d       	mov	r22, r5
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <vfprintf+0x158>
     c24:	6f ef       	ldi	r22, 0xFF	; 255
     c26:	7f ef       	ldi	r23, 0xFF	; 255
     c28:	c5 01       	movw	r24, r10
     c2a:	2c 87       	std	Y+12, r18	; 0x0c
     c2c:	14 d1       	rcall	.+552    	; 0xe56 <strnlen_P>
     c2e:	2c 01       	movw	r4, r24
     c30:	2c 85       	ldd	r18, Y+12	; 0x0c
     c32:	20 68       	ori	r18, 0x80	; 128
     c34:	22 2e       	mov	r2, r18
     c36:	83 01       	movw	r16, r6
     c38:	23 fc       	sbrc	r2, 3
     c3a:	19 c0       	rjmp	.+50     	; 0xc6e <vfprintf+0x19e>
     c3c:	83 2d       	mov	r24, r3
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	48 16       	cp	r4, r24
     c42:	59 06       	cpc	r5, r25
     c44:	a0 f4       	brcc	.+40     	; 0xc6e <vfprintf+0x19e>
     c46:	b7 01       	movw	r22, r14
     c48:	80 e2       	ldi	r24, 0x20	; 32
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	1a d1       	rcall	.+564    	; 0xe82 <fputc>
     c4e:	3a 94       	dec	r3
     c50:	f5 cf       	rjmp	.-22     	; 0xc3c <vfprintf+0x16c>
     c52:	f5 01       	movw	r30, r10
     c54:	27 fc       	sbrc	r2, 7
     c56:	85 91       	lpm	r24, Z+
     c58:	27 fe       	sbrs	r2, 7
     c5a:	81 91       	ld	r24, Z+
     c5c:	5f 01       	movw	r10, r30
     c5e:	b7 01       	movw	r22, r14
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	0f d1       	rcall	.+542    	; 0xe82 <fputc>
     c64:	31 10       	cpse	r3, r1
     c66:	3a 94       	dec	r3
     c68:	f1 e0       	ldi	r31, 0x01	; 1
     c6a:	4f 1a       	sub	r4, r31
     c6c:	51 08       	sbc	r5, r1
     c6e:	41 14       	cp	r4, r1
     c70:	51 04       	cpc	r5, r1
     c72:	79 f7       	brne	.-34     	; 0xc52 <vfprintf+0x182>
     c74:	de c0       	rjmp	.+444    	; 0xe32 <vfprintf+0x362>
     c76:	84 36       	cpi	r24, 0x64	; 100
     c78:	11 f0       	breq	.+4      	; 0xc7e <vfprintf+0x1ae>
     c7a:	89 36       	cpi	r24, 0x69	; 105
     c7c:	31 f5       	brne	.+76     	; 0xcca <vfprintf+0x1fa>
     c7e:	f8 01       	movw	r30, r16
     c80:	27 ff       	sbrs	r18, 7
     c82:	07 c0       	rjmp	.+14     	; 0xc92 <vfprintf+0x1c2>
     c84:	60 81       	ld	r22, Z
     c86:	71 81       	ldd	r23, Z+1	; 0x01
     c88:	82 81       	ldd	r24, Z+2	; 0x02
     c8a:	93 81       	ldd	r25, Z+3	; 0x03
     c8c:	0c 5f       	subi	r16, 0xFC	; 252
     c8e:	1f 4f       	sbci	r17, 0xFF	; 255
     c90:	08 c0       	rjmp	.+16     	; 0xca2 <vfprintf+0x1d2>
     c92:	60 81       	ld	r22, Z
     c94:	71 81       	ldd	r23, Z+1	; 0x01
     c96:	88 27       	eor	r24, r24
     c98:	77 fd       	sbrc	r23, 7
     c9a:	80 95       	com	r24
     c9c:	98 2f       	mov	r25, r24
     c9e:	0e 5f       	subi	r16, 0xFE	; 254
     ca0:	1f 4f       	sbci	r17, 0xFF	; 255
     ca2:	2f 76       	andi	r18, 0x6F	; 111
     ca4:	b2 2e       	mov	r11, r18
     ca6:	97 ff       	sbrs	r25, 7
     ca8:	09 c0       	rjmp	.+18     	; 0xcbc <vfprintf+0x1ec>
     caa:	90 95       	com	r25
     cac:	80 95       	com	r24
     cae:	70 95       	com	r23
     cb0:	61 95       	neg	r22
     cb2:	7f 4f       	sbci	r23, 0xFF	; 255
     cb4:	8f 4f       	sbci	r24, 0xFF	; 255
     cb6:	9f 4f       	sbci	r25, 0xFF	; 255
     cb8:	20 68       	ori	r18, 0x80	; 128
     cba:	b2 2e       	mov	r11, r18
     cbc:	2a e0       	ldi	r18, 0x0A	; 10
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	a4 01       	movw	r20, r8
     cc2:	11 d1       	rcall	.+546    	; 0xee6 <__ultoa_invert>
     cc4:	a8 2e       	mov	r10, r24
     cc6:	a8 18       	sub	r10, r8
     cc8:	43 c0       	rjmp	.+134    	; 0xd50 <vfprintf+0x280>
     cca:	85 37       	cpi	r24, 0x75	; 117
     ccc:	29 f4       	brne	.+10     	; 0xcd8 <vfprintf+0x208>
     cce:	2f 7e       	andi	r18, 0xEF	; 239
     cd0:	b2 2e       	mov	r11, r18
     cd2:	2a e0       	ldi	r18, 0x0A	; 10
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	25 c0       	rjmp	.+74     	; 0xd22 <vfprintf+0x252>
     cd8:	f2 2f       	mov	r31, r18
     cda:	f9 7f       	andi	r31, 0xF9	; 249
     cdc:	bf 2e       	mov	r11, r31
     cde:	8f 36       	cpi	r24, 0x6F	; 111
     ce0:	c1 f0       	breq	.+48     	; 0xd12 <vfprintf+0x242>
     ce2:	18 f4       	brcc	.+6      	; 0xcea <vfprintf+0x21a>
     ce4:	88 35       	cpi	r24, 0x58	; 88
     ce6:	79 f0       	breq	.+30     	; 0xd06 <vfprintf+0x236>
     ce8:	ad c0       	rjmp	.+346    	; 0xe44 <vfprintf+0x374>
     cea:	80 37       	cpi	r24, 0x70	; 112
     cec:	19 f0       	breq	.+6      	; 0xcf4 <vfprintf+0x224>
     cee:	88 37       	cpi	r24, 0x78	; 120
     cf0:	21 f0       	breq	.+8      	; 0xcfa <vfprintf+0x22a>
     cf2:	a8 c0       	rjmp	.+336    	; 0xe44 <vfprintf+0x374>
     cf4:	2f 2f       	mov	r18, r31
     cf6:	20 61       	ori	r18, 0x10	; 16
     cf8:	b2 2e       	mov	r11, r18
     cfa:	b4 fe       	sbrs	r11, 4
     cfc:	0d c0       	rjmp	.+26     	; 0xd18 <vfprintf+0x248>
     cfe:	8b 2d       	mov	r24, r11
     d00:	84 60       	ori	r24, 0x04	; 4
     d02:	b8 2e       	mov	r11, r24
     d04:	09 c0       	rjmp	.+18     	; 0xd18 <vfprintf+0x248>
     d06:	24 ff       	sbrs	r18, 4
     d08:	0a c0       	rjmp	.+20     	; 0xd1e <vfprintf+0x24e>
     d0a:	9f 2f       	mov	r25, r31
     d0c:	96 60       	ori	r25, 0x06	; 6
     d0e:	b9 2e       	mov	r11, r25
     d10:	06 c0       	rjmp	.+12     	; 0xd1e <vfprintf+0x24e>
     d12:	28 e0       	ldi	r18, 0x08	; 8
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	05 c0       	rjmp	.+10     	; 0xd22 <vfprintf+0x252>
     d18:	20 e1       	ldi	r18, 0x10	; 16
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <vfprintf+0x252>
     d1e:	20 e1       	ldi	r18, 0x10	; 16
     d20:	32 e0       	ldi	r19, 0x02	; 2
     d22:	f8 01       	movw	r30, r16
     d24:	b7 fe       	sbrs	r11, 7
     d26:	07 c0       	rjmp	.+14     	; 0xd36 <vfprintf+0x266>
     d28:	60 81       	ld	r22, Z
     d2a:	71 81       	ldd	r23, Z+1	; 0x01
     d2c:	82 81       	ldd	r24, Z+2	; 0x02
     d2e:	93 81       	ldd	r25, Z+3	; 0x03
     d30:	0c 5f       	subi	r16, 0xFC	; 252
     d32:	1f 4f       	sbci	r17, 0xFF	; 255
     d34:	06 c0       	rjmp	.+12     	; 0xd42 <vfprintf+0x272>
     d36:	60 81       	ld	r22, Z
     d38:	71 81       	ldd	r23, Z+1	; 0x01
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	0e 5f       	subi	r16, 0xFE	; 254
     d40:	1f 4f       	sbci	r17, 0xFF	; 255
     d42:	a4 01       	movw	r20, r8
     d44:	d0 d0       	rcall	.+416    	; 0xee6 <__ultoa_invert>
     d46:	a8 2e       	mov	r10, r24
     d48:	a8 18       	sub	r10, r8
     d4a:	fb 2d       	mov	r31, r11
     d4c:	ff 77       	andi	r31, 0x7F	; 127
     d4e:	bf 2e       	mov	r11, r31
     d50:	b6 fe       	sbrs	r11, 6
     d52:	0b c0       	rjmp	.+22     	; 0xd6a <vfprintf+0x29a>
     d54:	2b 2d       	mov	r18, r11
     d56:	2e 7f       	andi	r18, 0xFE	; 254
     d58:	a5 14       	cp	r10, r5
     d5a:	50 f4       	brcc	.+20     	; 0xd70 <vfprintf+0x2a0>
     d5c:	b4 fe       	sbrs	r11, 4
     d5e:	0a c0       	rjmp	.+20     	; 0xd74 <vfprintf+0x2a4>
     d60:	b2 fc       	sbrc	r11, 2
     d62:	08 c0       	rjmp	.+16     	; 0xd74 <vfprintf+0x2a4>
     d64:	2b 2d       	mov	r18, r11
     d66:	2e 7e       	andi	r18, 0xEE	; 238
     d68:	05 c0       	rjmp	.+10     	; 0xd74 <vfprintf+0x2a4>
     d6a:	7a 2c       	mov	r7, r10
     d6c:	2b 2d       	mov	r18, r11
     d6e:	03 c0       	rjmp	.+6      	; 0xd76 <vfprintf+0x2a6>
     d70:	7a 2c       	mov	r7, r10
     d72:	01 c0       	rjmp	.+2      	; 0xd76 <vfprintf+0x2a6>
     d74:	75 2c       	mov	r7, r5
     d76:	24 ff       	sbrs	r18, 4
     d78:	0d c0       	rjmp	.+26     	; 0xd94 <vfprintf+0x2c4>
     d7a:	fe 01       	movw	r30, r28
     d7c:	ea 0d       	add	r30, r10
     d7e:	f1 1d       	adc	r31, r1
     d80:	80 81       	ld	r24, Z
     d82:	80 33       	cpi	r24, 0x30	; 48
     d84:	11 f4       	brne	.+4      	; 0xd8a <vfprintf+0x2ba>
     d86:	29 7e       	andi	r18, 0xE9	; 233
     d88:	09 c0       	rjmp	.+18     	; 0xd9c <vfprintf+0x2cc>
     d8a:	22 ff       	sbrs	r18, 2
     d8c:	06 c0       	rjmp	.+12     	; 0xd9a <vfprintf+0x2ca>
     d8e:	73 94       	inc	r7
     d90:	73 94       	inc	r7
     d92:	04 c0       	rjmp	.+8      	; 0xd9c <vfprintf+0x2cc>
     d94:	82 2f       	mov	r24, r18
     d96:	86 78       	andi	r24, 0x86	; 134
     d98:	09 f0       	breq	.+2      	; 0xd9c <vfprintf+0x2cc>
     d9a:	73 94       	inc	r7
     d9c:	23 fd       	sbrc	r18, 3
     d9e:	12 c0       	rjmp	.+36     	; 0xdc4 <vfprintf+0x2f4>
     da0:	20 ff       	sbrs	r18, 0
     da2:	06 c0       	rjmp	.+12     	; 0xdb0 <vfprintf+0x2e0>
     da4:	5a 2c       	mov	r5, r10
     da6:	73 14       	cp	r7, r3
     da8:	18 f4       	brcc	.+6      	; 0xdb0 <vfprintf+0x2e0>
     daa:	53 0c       	add	r5, r3
     dac:	57 18       	sub	r5, r7
     dae:	73 2c       	mov	r7, r3
     db0:	73 14       	cp	r7, r3
     db2:	60 f4       	brcc	.+24     	; 0xdcc <vfprintf+0x2fc>
     db4:	b7 01       	movw	r22, r14
     db6:	80 e2       	ldi	r24, 0x20	; 32
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	2c 87       	std	Y+12, r18	; 0x0c
     dbc:	62 d0       	rcall	.+196    	; 0xe82 <fputc>
     dbe:	73 94       	inc	r7
     dc0:	2c 85       	ldd	r18, Y+12	; 0x0c
     dc2:	f6 cf       	rjmp	.-20     	; 0xdb0 <vfprintf+0x2e0>
     dc4:	73 14       	cp	r7, r3
     dc6:	10 f4       	brcc	.+4      	; 0xdcc <vfprintf+0x2fc>
     dc8:	37 18       	sub	r3, r7
     dca:	01 c0       	rjmp	.+2      	; 0xdce <vfprintf+0x2fe>
     dcc:	31 2c       	mov	r3, r1
     dce:	24 ff       	sbrs	r18, 4
     dd0:	11 c0       	rjmp	.+34     	; 0xdf4 <vfprintf+0x324>
     dd2:	b7 01       	movw	r22, r14
     dd4:	80 e3       	ldi	r24, 0x30	; 48
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	2c 87       	std	Y+12, r18	; 0x0c
     dda:	53 d0       	rcall	.+166    	; 0xe82 <fputc>
     ddc:	2c 85       	ldd	r18, Y+12	; 0x0c
     dde:	22 ff       	sbrs	r18, 2
     de0:	16 c0       	rjmp	.+44     	; 0xe0e <vfprintf+0x33e>
     de2:	21 ff       	sbrs	r18, 1
     de4:	03 c0       	rjmp	.+6      	; 0xdec <vfprintf+0x31c>
     de6:	88 e5       	ldi	r24, 0x58	; 88
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <vfprintf+0x320>
     dec:	88 e7       	ldi	r24, 0x78	; 120
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	b7 01       	movw	r22, r14
     df2:	0c c0       	rjmp	.+24     	; 0xe0c <vfprintf+0x33c>
     df4:	82 2f       	mov	r24, r18
     df6:	86 78       	andi	r24, 0x86	; 134
     df8:	51 f0       	breq	.+20     	; 0xe0e <vfprintf+0x33e>
     dfa:	21 fd       	sbrc	r18, 1
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <vfprintf+0x332>
     dfe:	80 e2       	ldi	r24, 0x20	; 32
     e00:	01 c0       	rjmp	.+2      	; 0xe04 <vfprintf+0x334>
     e02:	8b e2       	ldi	r24, 0x2B	; 43
     e04:	27 fd       	sbrc	r18, 7
     e06:	8d e2       	ldi	r24, 0x2D	; 45
     e08:	b7 01       	movw	r22, r14
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	3a d0       	rcall	.+116    	; 0xe82 <fputc>
     e0e:	a5 14       	cp	r10, r5
     e10:	30 f4       	brcc	.+12     	; 0xe1e <vfprintf+0x34e>
     e12:	b7 01       	movw	r22, r14
     e14:	80 e3       	ldi	r24, 0x30	; 48
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	34 d0       	rcall	.+104    	; 0xe82 <fputc>
     e1a:	5a 94       	dec	r5
     e1c:	f8 cf       	rjmp	.-16     	; 0xe0e <vfprintf+0x33e>
     e1e:	aa 94       	dec	r10
     e20:	f4 01       	movw	r30, r8
     e22:	ea 0d       	add	r30, r10
     e24:	f1 1d       	adc	r31, r1
     e26:	80 81       	ld	r24, Z
     e28:	b7 01       	movw	r22, r14
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	2a d0       	rcall	.+84     	; 0xe82 <fputc>
     e2e:	a1 10       	cpse	r10, r1
     e30:	f6 cf       	rjmp	.-20     	; 0xe1e <vfprintf+0x34e>
     e32:	33 20       	and	r3, r3
     e34:	09 f4       	brne	.+2      	; 0xe38 <vfprintf+0x368>
     e36:	5d ce       	rjmp	.-838    	; 0xaf2 <vfprintf+0x22>
     e38:	b7 01       	movw	r22, r14
     e3a:	80 e2       	ldi	r24, 0x20	; 32
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	21 d0       	rcall	.+66     	; 0xe82 <fputc>
     e40:	3a 94       	dec	r3
     e42:	f7 cf       	rjmp	.-18     	; 0xe32 <vfprintf+0x362>
     e44:	f7 01       	movw	r30, r14
     e46:	86 81       	ldd	r24, Z+6	; 0x06
     e48:	97 81       	ldd	r25, Z+7	; 0x07
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <vfprintf+0x380>
     e4c:	8f ef       	ldi	r24, 0xFF	; 255
     e4e:	9f ef       	ldi	r25, 0xFF	; 255
     e50:	2c 96       	adiw	r28, 0x0c	; 12
     e52:	e2 e1       	ldi	r30, 0x12	; 18
     e54:	c2 c0       	rjmp	.+388    	; 0xfda <__epilogue_restores__>

00000e56 <strnlen_P>:
     e56:	fc 01       	movw	r30, r24
     e58:	05 90       	lpm	r0, Z+
     e5a:	61 50       	subi	r22, 0x01	; 1
     e5c:	70 40       	sbci	r23, 0x00	; 0
     e5e:	01 10       	cpse	r0, r1
     e60:	d8 f7       	brcc	.-10     	; 0xe58 <strnlen_P+0x2>
     e62:	80 95       	com	r24
     e64:	90 95       	com	r25
     e66:	8e 0f       	add	r24, r30
     e68:	9f 1f       	adc	r25, r31
     e6a:	08 95       	ret

00000e6c <strnlen>:
     e6c:	fc 01       	movw	r30, r24
     e6e:	61 50       	subi	r22, 0x01	; 1
     e70:	70 40       	sbci	r23, 0x00	; 0
     e72:	01 90       	ld	r0, Z+
     e74:	01 10       	cpse	r0, r1
     e76:	d8 f7       	brcc	.-10     	; 0xe6e <strnlen+0x2>
     e78:	80 95       	com	r24
     e7a:	90 95       	com	r25
     e7c:	8e 0f       	add	r24, r30
     e7e:	9f 1f       	adc	r25, r31
     e80:	08 95       	ret

00000e82 <fputc>:
     e82:	0f 93       	push	r16
     e84:	1f 93       	push	r17
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	18 2f       	mov	r17, r24
     e8c:	09 2f       	mov	r16, r25
     e8e:	eb 01       	movw	r28, r22
     e90:	8b 81       	ldd	r24, Y+3	; 0x03
     e92:	81 fd       	sbrc	r24, 1
     e94:	03 c0       	rjmp	.+6      	; 0xe9c <fputc+0x1a>
     e96:	8f ef       	ldi	r24, 0xFF	; 255
     e98:	9f ef       	ldi	r25, 0xFF	; 255
     e9a:	20 c0       	rjmp	.+64     	; 0xedc <fputc+0x5a>
     e9c:	82 ff       	sbrs	r24, 2
     e9e:	10 c0       	rjmp	.+32     	; 0xec0 <fputc+0x3e>
     ea0:	4e 81       	ldd	r20, Y+6	; 0x06
     ea2:	5f 81       	ldd	r21, Y+7	; 0x07
     ea4:	2c 81       	ldd	r18, Y+4	; 0x04
     ea6:	3d 81       	ldd	r19, Y+5	; 0x05
     ea8:	42 17       	cp	r20, r18
     eaa:	53 07       	cpc	r21, r19
     eac:	7c f4       	brge	.+30     	; 0xecc <fputc+0x4a>
     eae:	e8 81       	ld	r30, Y
     eb0:	f9 81       	ldd	r31, Y+1	; 0x01
     eb2:	9f 01       	movw	r18, r30
     eb4:	2f 5f       	subi	r18, 0xFF	; 255
     eb6:	3f 4f       	sbci	r19, 0xFF	; 255
     eb8:	39 83       	std	Y+1, r19	; 0x01
     eba:	28 83       	st	Y, r18
     ebc:	10 83       	st	Z, r17
     ebe:	06 c0       	rjmp	.+12     	; 0xecc <fputc+0x4a>
     ec0:	e8 85       	ldd	r30, Y+8	; 0x08
     ec2:	f9 85       	ldd	r31, Y+9	; 0x09
     ec4:	81 2f       	mov	r24, r17
     ec6:	09 95       	icall
     ec8:	89 2b       	or	r24, r25
     eca:	29 f7       	brne	.-54     	; 0xe96 <fputc+0x14>
     ecc:	2e 81       	ldd	r18, Y+6	; 0x06
     ece:	3f 81       	ldd	r19, Y+7	; 0x07
     ed0:	2f 5f       	subi	r18, 0xFF	; 255
     ed2:	3f 4f       	sbci	r19, 0xFF	; 255
     ed4:	3f 83       	std	Y+7, r19	; 0x07
     ed6:	2e 83       	std	Y+6, r18	; 0x06
     ed8:	81 2f       	mov	r24, r17
     eda:	90 2f       	mov	r25, r16
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	1f 91       	pop	r17
     ee2:	0f 91       	pop	r16
     ee4:	08 95       	ret

00000ee6 <__ultoa_invert>:
     ee6:	fa 01       	movw	r30, r20
     ee8:	aa 27       	eor	r26, r26
     eea:	28 30       	cpi	r18, 0x08	; 8
     eec:	51 f1       	breq	.+84     	; 0xf42 <__ultoa_invert+0x5c>
     eee:	20 31       	cpi	r18, 0x10	; 16
     ef0:	81 f1       	breq	.+96     	; 0xf52 <__ultoa_invert+0x6c>
     ef2:	e8 94       	clt
     ef4:	6f 93       	push	r22
     ef6:	6e 7f       	andi	r22, 0xFE	; 254
     ef8:	6e 5f       	subi	r22, 0xFE	; 254
     efa:	7f 4f       	sbci	r23, 0xFF	; 255
     efc:	8f 4f       	sbci	r24, 0xFF	; 255
     efe:	9f 4f       	sbci	r25, 0xFF	; 255
     f00:	af 4f       	sbci	r26, 0xFF	; 255
     f02:	b1 e0       	ldi	r27, 0x01	; 1
     f04:	3e d0       	rcall	.+124    	; 0xf82 <__ultoa_invert+0x9c>
     f06:	b4 e0       	ldi	r27, 0x04	; 4
     f08:	3c d0       	rcall	.+120    	; 0xf82 <__ultoa_invert+0x9c>
     f0a:	67 0f       	add	r22, r23
     f0c:	78 1f       	adc	r23, r24
     f0e:	89 1f       	adc	r24, r25
     f10:	9a 1f       	adc	r25, r26
     f12:	a1 1d       	adc	r26, r1
     f14:	68 0f       	add	r22, r24
     f16:	79 1f       	adc	r23, r25
     f18:	8a 1f       	adc	r24, r26
     f1a:	91 1d       	adc	r25, r1
     f1c:	a1 1d       	adc	r26, r1
     f1e:	6a 0f       	add	r22, r26
     f20:	71 1d       	adc	r23, r1
     f22:	81 1d       	adc	r24, r1
     f24:	91 1d       	adc	r25, r1
     f26:	a1 1d       	adc	r26, r1
     f28:	20 d0       	rcall	.+64     	; 0xf6a <__ultoa_invert+0x84>
     f2a:	09 f4       	brne	.+2      	; 0xf2e <__ultoa_invert+0x48>
     f2c:	68 94       	set
     f2e:	3f 91       	pop	r19
     f30:	2a e0       	ldi	r18, 0x0A	; 10
     f32:	26 9f       	mul	r18, r22
     f34:	11 24       	eor	r1, r1
     f36:	30 19       	sub	r19, r0
     f38:	30 5d       	subi	r19, 0xD0	; 208
     f3a:	31 93       	st	Z+, r19
     f3c:	de f6       	brtc	.-74     	; 0xef4 <__ultoa_invert+0xe>
     f3e:	cf 01       	movw	r24, r30
     f40:	08 95       	ret
     f42:	46 2f       	mov	r20, r22
     f44:	47 70       	andi	r20, 0x07	; 7
     f46:	40 5d       	subi	r20, 0xD0	; 208
     f48:	41 93       	st	Z+, r20
     f4a:	b3 e0       	ldi	r27, 0x03	; 3
     f4c:	0f d0       	rcall	.+30     	; 0xf6c <__ultoa_invert+0x86>
     f4e:	c9 f7       	brne	.-14     	; 0xf42 <__ultoa_invert+0x5c>
     f50:	f6 cf       	rjmp	.-20     	; 0xf3e <__ultoa_invert+0x58>
     f52:	46 2f       	mov	r20, r22
     f54:	4f 70       	andi	r20, 0x0F	; 15
     f56:	40 5d       	subi	r20, 0xD0	; 208
     f58:	4a 33       	cpi	r20, 0x3A	; 58
     f5a:	18 f0       	brcs	.+6      	; 0xf62 <__ultoa_invert+0x7c>
     f5c:	49 5d       	subi	r20, 0xD9	; 217
     f5e:	31 fd       	sbrc	r19, 1
     f60:	40 52       	subi	r20, 0x20	; 32
     f62:	41 93       	st	Z+, r20
     f64:	02 d0       	rcall	.+4      	; 0xf6a <__ultoa_invert+0x84>
     f66:	a9 f7       	brne	.-22     	; 0xf52 <__ultoa_invert+0x6c>
     f68:	ea cf       	rjmp	.-44     	; 0xf3e <__ultoa_invert+0x58>
     f6a:	b4 e0       	ldi	r27, 0x04	; 4
     f6c:	a6 95       	lsr	r26
     f6e:	97 95       	ror	r25
     f70:	87 95       	ror	r24
     f72:	77 95       	ror	r23
     f74:	67 95       	ror	r22
     f76:	ba 95       	dec	r27
     f78:	c9 f7       	brne	.-14     	; 0xf6c <__ultoa_invert+0x86>
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	61 05       	cpc	r22, r1
     f7e:	71 05       	cpc	r23, r1
     f80:	08 95       	ret
     f82:	9b 01       	movw	r18, r22
     f84:	ac 01       	movw	r20, r24
     f86:	0a 2e       	mov	r0, r26
     f88:	06 94       	lsr	r0
     f8a:	57 95       	ror	r21
     f8c:	47 95       	ror	r20
     f8e:	37 95       	ror	r19
     f90:	27 95       	ror	r18
     f92:	ba 95       	dec	r27
     f94:	c9 f7       	brne	.-14     	; 0xf88 <__ultoa_invert+0xa2>
     f96:	62 0f       	add	r22, r18
     f98:	73 1f       	adc	r23, r19
     f9a:	84 1f       	adc	r24, r20
     f9c:	95 1f       	adc	r25, r21
     f9e:	a0 1d       	adc	r26, r0
     fa0:	08 95       	ret

00000fa2 <__prologue_saves__>:
     fa2:	2f 92       	push	r2
     fa4:	3f 92       	push	r3
     fa6:	4f 92       	push	r4
     fa8:	5f 92       	push	r5
     faa:	6f 92       	push	r6
     fac:	7f 92       	push	r7
     fae:	8f 92       	push	r8
     fb0:	9f 92       	push	r9
     fb2:	af 92       	push	r10
     fb4:	bf 92       	push	r11
     fb6:	cf 92       	push	r12
     fb8:	df 92       	push	r13
     fba:	ef 92       	push	r14
     fbc:	ff 92       	push	r15
     fbe:	0f 93       	push	r16
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	ca 1b       	sub	r28, r26
     fcc:	db 0b       	sbc	r29, r27
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	cd bf       	out	0x3d, r28	; 61
     fd8:	09 94       	ijmp

00000fda <__epilogue_restores__>:
     fda:	2a 88       	ldd	r2, Y+18	; 0x12
     fdc:	39 88       	ldd	r3, Y+17	; 0x11
     fde:	48 88       	ldd	r4, Y+16	; 0x10
     fe0:	5f 84       	ldd	r5, Y+15	; 0x0f
     fe2:	6e 84       	ldd	r6, Y+14	; 0x0e
     fe4:	7d 84       	ldd	r7, Y+13	; 0x0d
     fe6:	8c 84       	ldd	r8, Y+12	; 0x0c
     fe8:	9b 84       	ldd	r9, Y+11	; 0x0b
     fea:	aa 84       	ldd	r10, Y+10	; 0x0a
     fec:	b9 84       	ldd	r11, Y+9	; 0x09
     fee:	c8 84       	ldd	r12, Y+8	; 0x08
     ff0:	df 80       	ldd	r13, Y+7	; 0x07
     ff2:	ee 80       	ldd	r14, Y+6	; 0x06
     ff4:	fd 80       	ldd	r15, Y+5	; 0x05
     ff6:	0c 81       	ldd	r16, Y+4	; 0x04
     ff8:	1b 81       	ldd	r17, Y+3	; 0x03
     ffa:	aa 81       	ldd	r26, Y+2	; 0x02
     ffc:	b9 81       	ldd	r27, Y+1	; 0x01
     ffe:	ce 0f       	add	r28, r30
    1000:	d1 1d       	adc	r29, r1
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	ed 01       	movw	r28, r26
    100e:	08 95       	ret

00001010 <_exit>:
    1010:	f8 94       	cli

00001012 <__stop_program>:
    1012:	ff cf       	rjmp	.-2      	; 0x1012 <__stop_program>
